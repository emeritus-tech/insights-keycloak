{"version":3,"file":"AuthenticationSection-CmrwZG2d.js","sources":["../../../../../node_modules/.pnpm/@patternfly+react-icons@5.3.2_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-icons/dist/esm/icons/cog-icon.js","../../src/authentication/BindFlowDialog.tsx","../../src/authentication/DuplicateFlowModal.tsx","../../src/authentication/components/RequiredActionConfigModal.tsx","../../src/authentication/RequiredActions.tsx","../../src/authentication/components/UsedBy.tsx","../../src/authentication/policies/CibaPolicy.tsx","../../src/authentication/policies/OtpPolicy.tsx","../../src/authentication/policies/PolicyRow.tsx","../../src/authentication/policies/util.ts","../../src/authentication/policies/PasswordPolicy.tsx","../../src/authentication/policies/WebauthnPolicy.tsx","../../src/authentication/policies/Policies.tsx","../../src/authentication/AuthenticationSection.tsx"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const CogIconConfig = {\n  name: 'CogIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M487.4 315.7l-42.6-24.6c4.3-23.2 4.3-47 0-70.2l42.6-24.6c4.9-2.8 7.1-8.6 5.5-14-11.1-35.6-30-67.8-54.7-94.6-3.8-4.1-10-5.1-14.8-2.3L380.8 110c-17.9-15.4-38.5-27.3-60.8-35.1V25.8c0-5.6-3.9-10.5-9.4-11.7-36.7-8.2-74.3-7.8-109.2 0-5.5 1.2-9.4 6.1-9.4 11.7V75c-22.2 7.9-42.8 19.8-60.8 35.1L88.7 85.5c-4.9-2.8-11-1.9-14.8 2.3-24.7 26.7-43.6 58.9-54.7 94.6-1.7 5.4.6 11.2 5.5 14L67.3 221c-4.3 23.2-4.3 47 0 70.2l-42.6 24.6c-4.9 2.8-7.1 8.6-5.5 14 11.1 35.6 30 67.8 54.7 94.6 3.8 4.1 10 5.1 14.8 2.3l42.6-24.6c17.9 15.4 38.5 27.3 60.8 35.1v49.2c0 5.6 3.9 10.5 9.4 11.7 36.7 8.2 74.3 7.8 109.2 0 5.5-1.2 9.4-6.1 9.4-11.7v-49.2c22.2-7.9 42.8-19.8 60.8-35.1l42.6 24.6c4.9 2.8 11 1.9 14.8-2.3 24.7-26.7 43.6-58.9 54.7-94.6 1.5-5.5-.7-11.3-5.6-14.1zM256 336c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CogIcon = createIcon(CogIconConfig);\n\nexport default CogIcon;","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { REALM_FLOWS } from \"./AuthenticationSection\";\nimport { useAdminClient } from \"../admin-client\";\n\ntype BindingForm = {\n  bindingType: keyof RealmRepresentation;\n};\n\ntype BindFlowDialogProps = {\n  flowAlias: string;\n  onClose: (used?: boolean) => void;\n};\n\nexport const BindFlowDialog = ({ flowAlias, onClose }: BindFlowDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<BindingForm>();\n  const { addAlert, addError } = useAlerts();\n  const { realm, realmRepresentation: realmRep, refresh } = useRealm();\n\n  const onSubmit = async ({ bindingType }: BindingForm) => {\n    try {\n      await adminClient.realms.update(\n        { realm },\n        { ...realmRep, [bindingType]: flowAlias },\n      );\n      refresh();\n      addAlert(t(\"updateFlowSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateFlowError\", error);\n    }\n\n    onClose(true);\n  };\n\n  const flowKeys = Array.from(REALM_FLOWS.keys());\n\n  return (\n    <Modal\n      title={t(\"bindFlow\")}\n      variant=\"small\"\n      onClose={() => onClose()}\n      actions={[\n        <Button key=\"confirm\" data-testid=\"save\" type=\"submit\" form=\"bind-form\">\n          {t(\"save\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => onClose()}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <Form id=\"bind-form\" isHorizontal onSubmit={form.handleSubmit(onSubmit)}>\n        <FormProvider {...form}>\n          <SelectControl\n            id=\"chooseBindingType\"\n            name=\"bindingType\"\n            label={t(\"chooseBindingType\")}\n            options={flowKeys\n              .filter((f) => f !== \"dockerAuthenticationFlow\")\n              .map((key) => ({\n                key,\n                value: t(`flow.${REALM_FLOWS.get(key)}`),\n              }))}\n            controller={{ defaultValue: flowKeys[0] }}\n            menuAppendTo=\"parent\"\n            aria-label={t(\"chooseBindingType\")}\n          />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { NameDescription } from \"./form/NameDescription\";\nimport { toFlow } from \"./routes/Flow\";\n\ntype DuplicateFlowModalProps = {\n  name: string;\n  description: string;\n  toggleDialog: () => void;\n  onComplete: () => void;\n};\n\nexport const DuplicateFlowModal = ({\n  name,\n  description,\n  toggleDialog,\n  onComplete,\n}: DuplicateFlowModalProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<AuthenticationFlowRepresentation>({ mode: \"onChange\" });\n  const { setValue, getValues, handleSubmit } = form;\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  useEffect(() => {\n    setValue(\"alias\", t(\"copyOf\", { name }));\n    setValue(\"description\", description);\n  }, [name, description]);\n\n  const onSubmit = async () => {\n    const form = getValues();\n    try {\n      await adminClient.authenticationManagement.copyFlow({\n        flow: name,\n        newName: form.alias!,\n      });\n      const newFlow = (\n        await adminClient.authenticationManagement.getFlows()\n      ).find((flow) => flow.alias === form.alias)!;\n\n      if (form.description !== description) {\n        newFlow.description = form.description;\n        await adminClient.authenticationManagement.updateFlow(\n          { flowId: newFlow.id! },\n          newFlow,\n        );\n      }\n      addAlert(t(\"copyFlowSuccess\"), AlertVariant.success);\n      navigate(\n        toFlow({\n          realm,\n          id: newFlow.id!,\n          usedBy: \"notInUse\",\n          builtIn: newFlow.builtIn ? \"builtIn\" : undefined,\n        }),\n      );\n    } catch (error) {\n      addError(\"copyFlowError\", error);\n    }\n    onComplete();\n  };\n\n  return (\n    <Modal\n      title={t(\"duplicateFlow\")}\n      onClose={toggleDialog}\n      variant={ModalVariant.small}\n      actions={[\n        <Button\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          type=\"submit\"\n          form=\"duplicate-flow-form\"\n        >\n          {t(\"duplicate\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={toggleDialog}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <FormProvider {...form}>\n        <Form\n          id=\"duplicate-flow-form\"\n          onSubmit={handleSubmit(onSubmit)}\n          isHorizontal\n        >\n          <NameDescription />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import RequiredActionConfigInfoRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionConfigInfoRepresentation\";\nimport RequiredActionConfigRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionConfigRepresentation\";\nimport type RequiredActionProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { TrashIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { DynamicComponents } from \"../../components/dynamic/DynamicComponents\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\n\ntype RequiredActionConfigModalForm = {\n  // alias: string;\n  config: { [index: string]: string };\n};\n\ntype RequiredActionConfigModalProps = {\n  requiredAction: RequiredActionProviderRepresentation;\n  onClose: () => void;\n};\n\nexport const RequiredActionConfigModal = ({\n  requiredAction,\n  onClose,\n}: RequiredActionConfigModalProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [configDescription, setConfigDescription] =\n    useState<RequiredActionConfigInfoRepresentation>();\n\n  const form = useForm<RequiredActionConfigModalForm>();\n  const { setValue, handleSubmit } = form;\n\n  // // default config all required actions should have\n  // const defaultConfigProperties = [];\n\n  const setupForm = (config?: RequiredActionConfigRepresentation) => {\n    convertToFormValues(config || {}, setValue);\n  };\n\n  useFetch(\n    async () => {\n      const configDescription =\n        await adminClient.authenticationManagement.getRequiredActionConfigDescription(\n          {\n            alias: requiredAction.alias!,\n          },\n        );\n\n      const config =\n        await adminClient.authenticationManagement.getRequiredActionConfig({\n          alias: requiredAction.alias!,\n        });\n\n      // merge default and fetched config properties\n      configDescription.properties = [\n        //...defaultConfigProperties!,\n        ...configDescription.properties!,\n      ];\n\n      return { configDescription, config };\n    },\n    ({ configDescription, config }) => {\n      setConfigDescription(configDescription);\n      setupForm(config);\n    },\n    [],\n  );\n\n  const save = async (saved: RequiredActionConfigModalForm) => {\n    const newConfig = convertFormValuesToObject(saved);\n    try {\n      await adminClient.authenticationManagement.updateRequiredActionConfig(\n        { alias: requiredAction.alias! },\n        newConfig,\n      );\n      setupForm(newConfig);\n      addAlert(t(\"configSaveSuccess\"), AlertVariant.success);\n      onClose();\n    } catch (error) {\n      addError(\"configSaveError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen\n      title={t(\"requiredActionConfig\", { name: requiredAction.name })}\n      onClose={onClose}\n    >\n      <Form id=\"required-action-config-form\" onSubmit={handleSubmit(save)}>\n        <FormProvider {...form}>\n          <DynamicComponents\n            stringify\n            properties={configDescription?.properties || []}\n          />\n        </FormProvider>\n        <ActionGroup>\n          <Button data-testid=\"save\" variant=\"primary\" type=\"submit\">\n            {t(\"save\")}\n          </Button>\n          <Button\n            data-testid=\"cancel\"\n            variant={ButtonVariant.link}\n            onClick={onClose}\n          >\n            {t(\"cancel\")}\n          </Button>\n          <Button\n            className=\"pf-v5-u-ml-3xl\"\n            data-testid=\"clear\"\n            variant={ButtonVariant.link}\n            onClick={async () => {\n              await adminClient.authenticationManagement.removeRequiredActionConfig(\n                {\n                  alias: requiredAction.alias!,\n                },\n              );\n              form.reset({});\n              onClose();\n            }}\n          >\n            {t(\"clear\")} <TrashIcon />\n          </Button>\n        </ActionGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import type RequiredActionProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport type RequiredActionProviderSimpleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderSimpleRepresentation\";\nimport { AlertVariant, Button, Switch } from \"@patternfly/react-core\";\nimport { CogIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { addTrailingSlash, toKey } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { DraggableTable } from \"./components/DraggableTable\";\nimport { RequiredActionConfigModal } from \"./components/RequiredActionConfigModal\";\nimport { fetchWithError } from \"@keycloak/keycloak-admin-client\";\nimport { getAuthorizationHeaders } from \"../utils/getAuthorizationHeaders\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\ntype DataType = RequiredActionProviderRepresentation &\n  RequiredActionProviderSimpleRepresentation & {\n    configurable?: boolean;\n  };\n\ntype Row = {\n  name: string;\n  enabled: boolean;\n  defaultAction: boolean;\n  data: DataType;\n};\n\nexport const RequiredActions = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [actions, setActions] = useState<Row[]>();\n  const [selectedAction, setSelectedAction] = useState<DataType>();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const { realm: realmName } = useRealm();\n\n  const loadActions = async (): Promise<\n    RequiredActionProviderRepresentation[]\n  > => {\n    const requiredActionsRequest = await fetchWithError(\n      `${addTrailingSlash(\n        adminClient.baseUrl,\n      )}admin/realms/${realmName}/ui-ext/authentication-management/required-actions`,\n      {\n        method: \"GET\",\n        headers: getAuthorizationHeaders(await adminClient.getAccessToken()),\n      },\n    );\n\n    return (await requiredActionsRequest.json()) as DataType[];\n  };\n\n  useFetch(\n    async () => {\n      const [requiredActions, unregisteredRequiredActions] = await Promise.all([\n        loadActions(),\n        adminClient.authenticationManagement.getUnregisteredRequiredActions(),\n      ]);\n      return [\n        ...requiredActions.map((action) => ({\n          name: action.name!,\n          enabled: action.enabled!,\n          defaultAction: action.defaultAction!,\n          data: action,\n        })),\n        ...unregisteredRequiredActions.map((action) => ({\n          name: action.name!,\n          enabled: false,\n          defaultAction: false,\n          data: action,\n        })),\n      ];\n    },\n    (actions) => setActions(actions),\n    [key],\n  );\n\n  const isUnregisteredAction = (data: DataType): boolean => {\n    return !(\"alias\" in data);\n  };\n\n  const updateAction = async (\n    action: DataType,\n    field: \"enabled\" | \"defaultAction\",\n  ) => {\n    try {\n      if (field in action) {\n        action[field] = !action[field];\n        // remove configurable property from action which only exists for the admin ui\n        delete action.configurable;\n        await adminClient.authenticationManagement.updateRequiredAction(\n          { alias: action.alias! },\n          action,\n        );\n      } else if (isUnregisteredAction(action)) {\n        await adminClient.authenticationManagement.registerRequiredAction({\n          name: action.name,\n          providerId: action.providerId,\n        });\n      }\n      refresh();\n      addAlert(t(\"updatedRequiredActionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updatedRequiredActionError\", error);\n    }\n  };\n\n  const executeMove = async (\n    action: RequiredActionProviderRepresentation,\n    times: number,\n  ) => {\n    try {\n      const alias = action.alias!;\n      for (let index = 0; index < Math.abs(times); index++) {\n        if (times > 0) {\n          await adminClient.authenticationManagement.lowerRequiredActionPriority(\n            {\n              alias,\n            },\n          );\n        } else {\n          await adminClient.authenticationManagement.raiseRequiredActionPriority(\n            {\n              alias,\n            },\n          );\n        }\n      }\n      refresh();\n\n      addAlert(t(\"updatedRequiredActionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updatedRequiredActionError\", error);\n    }\n  };\n\n  if (!actions) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      {selectedAction && (\n        <RequiredActionConfigModal\n          requiredAction={selectedAction}\n          onClose={() => setSelectedAction(undefined)}\n        />\n      )}\n      <DraggableTable\n        keyField=\"name\"\n        onDragFinish={async (nameDragged, items) => {\n          const keys = actions.map((e) => e.name);\n          const newIndex = items.indexOf(nameDragged);\n          const oldIndex = keys.indexOf(nameDragged);\n          const dragged = actions[oldIndex].data;\n          if (!dragged.alias) return;\n\n          const times = newIndex - oldIndex;\n          executeMove(dragged, times);\n        }}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"action\",\n            width: 50,\n          },\n          {\n            name: \"enabled\",\n            displayKey: \"enabled\",\n            cellRenderer: (row) => (\n              <Switch\n                id={`enable-${toKey(row.name)}`}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={row.enabled}\n                onChange={() => {\n                  updateAction(row.data, \"enabled\");\n                }}\n                aria-label={toKey(row.name)}\n              />\n            ),\n            width: 20,\n          },\n          {\n            name: \"default\",\n            displayKey: \"setAsDefaultAction\",\n            thTooltipText: \"authDefaultActionTooltip\",\n            cellRenderer: (row) => (\n              <Switch\n                id={`default-${toKey(row.name)}`}\n                label={t(\"on\")}\n                isDisabled={!row.enabled}\n                labelOff={!row.enabled ? t(\"disabledOff\") : t(\"off\")}\n                isChecked={row.defaultAction}\n                onChange={() => {\n                  updateAction(row.data, \"defaultAction\");\n                }}\n                aria-label={toKey(row.name)}\n              />\n            ),\n            width: 20,\n          },\n          {\n            name: \"config\",\n            displayKey: \"configure\",\n            cellRenderer: (row) =>\n              row.data.configurable ? (\n                <Button\n                  variant=\"plain\"\n                  aria-label={t(\"settings\")}\n                  onClick={() => setSelectedAction(row.data)}\n                >\n                  <CogIcon />\n                </Button>\n              ) : undefined,\n            width: 10,\n          },\n        ]}\n        data={actions}\n      />\n    </>\n  );\n};\n","import {\n  Button,\n  Modal,\n  ModalVariant,\n  Popover,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { CheckCircleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { fetchUsedBy } from \"../../components/role-mapping/resource\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport useToggle from \"../../utils/useToggle\";\nimport { AuthenticationType, REALM_FLOWS } from \"../AuthenticationSection\";\n\nimport style from \"./used-by.module.css\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\ntype UsedByProps = {\n  authType: AuthenticationType;\n};\n\nconst Label = ({ label }: { label: string }) => (\n  <>\n    <CheckCircleIcon className={style.label} /> {label}\n  </>\n);\n\ntype UsedByModalProps = {\n  id: string;\n  onClose: () => void;\n  isSpecificClient: boolean;\n};\n\nconst UsedByModal = ({ id, isSpecificClient, onClose }: UsedByModalProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const loader = async (\n    first?: number,\n    max?: number,\n    search?: string,\n  ): Promise<{ name: string }[]> => {\n    const result = await fetchUsedBy(adminClient, {\n      id,\n      type: isSpecificClient ? \"clients\" : \"idp\",\n      first: first || 0,\n      max: max || 10,\n      search,\n    });\n    return result.map((p) => ({ name: p }));\n  };\n\n  return (\n    <Modal\n      header={\n        <TextContent>\n          <Text component={TextVariants.h1}>{t(\"flowUsedBy\")}</Text>\n          <Text>\n            {t(\"flowUsedByDescription\", {\n              value: isSpecificClient ? t(\"clients\") : t(\"identiyProviders\"),\n            })}\n          </Text>\n        </TextContent>\n      }\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"cancel\"\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          onClick={onClose}\n        >\n          {t(\"close\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"usedBy\"\n        searchPlaceholderKey=\"search\"\n        columns={[\n          {\n            name: \"name\",\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n\nexport const UsedBy = ({ authType: { id, usedBy } }: UsedByProps) => {\n  const { t } = useTranslation();\n  const { realmRepresentation: realm } = useRealm();\n  const [open, toggle] = useToggle();\n\n  const key = Object.entries(realm!).find(\n    (e) => e[1] === usedBy?.values[0],\n  )?.[0];\n\n  return (\n    <>\n      {open && (\n        <UsedByModal\n          id={id!}\n          onClose={toggle}\n          isSpecificClient={usedBy?.type === \"SPECIFIC_CLIENTS\"}\n        />\n      )}\n      {(usedBy?.type === \"SPECIFIC_PROVIDERS\" ||\n        usedBy?.type === \"SPECIFIC_CLIENTS\") &&\n        (usedBy.values.length <= 8 ? (\n          <Popover\n            key={id}\n            aria-label={t(\"usedBy\")}\n            bodyContent={\n              <div key={`usedBy-${id}-${usedBy.values}`}>\n                {t(\n                  \"appliedBy\" +\n                    (usedBy.type === \"SPECIFIC_CLIENTS\"\n                      ? \"Clients\"\n                      : \"Providers\"),\n                )}{\" \"}\n                {usedBy.values.map((used, index) => (\n                  <>\n                    <strong>{used}</strong>\n                    {index < usedBy.values.length - 1 ? \", \" : \"\"}\n                  </>\n                ))}\n              </div>\n            }\n          >\n            <Button variant=\"link\" className={style.label}>\n              <Label label={t(`used.${usedBy.type}`)} />\n            </Button>\n          </Popover>\n        ) : (\n          <Button variant=\"link\" className={style.label} onClick={toggle}>\n            <Label label={t(`used.${usedBy.type}`)} />\n          </Button>\n        ))}\n      {usedBy?.type === \"DEFAULT\" && (\n        <Label label={t(`flow.${REALM_FLOWS.get(key!)}`)} />\n      )}\n      {!usedBy?.type && t(\"used.notInUse\")}\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl, TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\n\nconst CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES = [\"poll\", \"ping\"] as const;\nconst CIBA_EXPIRES_IN_MIN = 10;\nconst CIBA_EXPIRES_IN_MAX = 600;\nconst CIBA_INTERVAL_MIN = 0;\nconst CIBA_INTERVAL_MAX = 600;\n\ntype CibaPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<\n  RealmRepresentation,\n  \"clients\" | \"components\" | \"groups\"\n>;\n\nexport const CibaPolicy = ({ realm, realmUpdated }: CibaPolicyProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<FormFields>({ mode: \"onChange\" });\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n\n  const setupForm = (realm: RealmRepresentation) =>\n    convertToFormValues(realm, form.setValue);\n\n  useEffect(() => setupForm(realm), []);\n\n  const onSubmit = async (formValues: FormFields) => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        convertFormValuesToObject(formValues),\n      );\n\n      const updatedRealm = await adminClient.realms.findOne({\n        realm: realmName,\n      });\n\n      realmUpdated(updatedRealm!);\n      setupForm(updatedRealm!);\n      addAlert(t(\"updateCibaSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateCibaError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={form.handleSubmit(onSubmit)}\n      >\n        <FormProvider {...form}>\n          <SelectControl\n            name=\"attributes.cibaBackchannelTokenDeliveryMode\"\n            label={t(\"cibaBackchannelTokenDeliveryMode\")}\n            labelIcon={t(\"cibaBackchannelTokenDeliveryModeHelp\")}\n            options={CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES.map((mode) => ({\n              key: mode,\n              value: t(`cibaBackhannelTokenDeliveryModes.${mode}`),\n            }))}\n            controller={{ defaultValue: \"\" }}\n          />\n          <TextControl\n            name=\"attributes.cibaExpiresIn\"\n            type=\"number\"\n            min={CIBA_EXPIRES_IN_MIN}\n            max={CIBA_EXPIRES_IN_MAX}\n            label={t(\"cibaExpiresIn\")}\n            labelIcon={t(\"cibaExpiresInHelp\")}\n            rules={{\n              min: {\n                value: CIBA_EXPIRES_IN_MIN,\n                message: t(\"greaterThan\", {\n                  value: CIBA_EXPIRES_IN_MIN,\n                }),\n              },\n              max: {\n                value: CIBA_EXPIRES_IN_MAX,\n                message: t(\"lessThan\", { value: CIBA_EXPIRES_IN_MAX }),\n              },\n              required: {\n                value: true,\n                message: t(\"required\"),\n              },\n            }}\n          />\n          <TextControl\n            name=\"attributes.cibaInterval\"\n            type=\"number\"\n            min={CIBA_EXPIRES_IN_MIN}\n            max={CIBA_EXPIRES_IN_MAX}\n            label={t(\"cibaInterval\")}\n            labelIcon={t(\"cibaIntervalHelp\")}\n            rules={{\n              min: {\n                value: CIBA_INTERVAL_MIN,\n                message: t(\"greaterThan\", {\n                  value: CIBA_INTERVAL_MIN,\n                }),\n              },\n              max: {\n                value: CIBA_INTERVAL_MAX,\n                message: t(\"lessThan\", { value: CIBA_INTERVAL_MAX }),\n              },\n              required: {\n                value: true,\n                message: t(\"required\"),\n              },\n            }}\n          />\n          <SelectControl\n            name=\"attributes.cibaAuthRequestedUserHint\"\n            label={t(\"cibaAuthRequestedUserHint\")}\n            labelIcon={t(\"cibaAuthRequestedUserHintHelp\")}\n            options={[\"login_hint\", \"id_token_hint\", \"login_hint_token\"]}\n            controller={{ defaultValue: \"\" }}\n            isDisabled\n          />\n        </FormProvider>\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!form.formState.isValid || !form.formState.isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => setupForm({ ...realm })}\n          >\n            {t(\"reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  PageSection,\n  Radio,\n} from \"@patternfly/react-core\";\nimport { useEffect, useMemo } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  HelpItem,\n  NumberControl,\n  SelectControl,\n  SwitchControl,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { TimeSelectorControl } from \"../../components/time-selector/TimeSelectorControl\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useLocaleSort from \"../../utils/useLocaleSort\";\n\nimport \"./otp-policy.css\";\n\nconst POLICY_TYPES = [\"totp\", \"hotp\"] as const;\nconst OTP_HASH_ALGORITHMS = [\"SHA1\", \"SHA256\", \"SHA512\"] as const;\nconst NUMBER_OF_DIGITS = [6, 8] as const;\n\ntype OtpPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<\n  RealmRepresentation,\n  \"clients\" | \"components\" | \"groups\" | \"users\" | \"federatedUsers\"\n>;\n\nexport const OtpPolicy = ({ realm, realmUpdated }: OtpPolicyProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<FormFields>({ mode: \"onChange\", defaultValues: realm });\n  const {\n    control,\n    reset,\n    handleSubmit,\n    formState: { isValid, isDirty },\n  } = form;\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const localeSort = useLocaleSort();\n\n  const otpType = useWatch({\n    name: \"otpPolicyType\",\n    control,\n    defaultValue: POLICY_TYPES[0],\n  });\n\n  const setupForm = (formValues: FormFields) => reset(formValues);\n\n  useEffect(() => setupForm(realm), []);\n\n  const supportedApplications = useMemo(() => {\n    const labels = (realm.otpSupportedApplications ?? []).map((key) =>\n      t(`otpSupportedApplications.${key}`),\n    );\n\n    return localeSort(labels, (label) => label);\n  }, [realm.otpSupportedApplications]);\n\n  const onSubmit = async (formValues: FormFields) => {\n    try {\n      await adminClient.realms.update({ realm: realmName }, formValues);\n      const updatedRealm = await adminClient.realms.findOne({\n        realm: realmName,\n      });\n      realmUpdated(updatedRealm!);\n      setupForm(updatedRealm!);\n      addAlert(t(\"updateOtpSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateOtpError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"keycloak__otp_policies_authentication__form\"\n      >\n        <FormProvider {...form}>\n          <FormGroup\n            label={t(\"otpType\")}\n            labelIcon={\n              <HelpItem helpText={t(\"otpTypeHelp\")} fieldLabelId=\"otpType\" />\n            }\n            hasNoPaddingTop\n          >\n            <Controller\n              name=\"otpPolicyType\"\n              data-testid=\"otpPolicyType\"\n              defaultValue={POLICY_TYPES[0]}\n              control={control}\n              render={({ field }) => (\n                <>\n                  {POLICY_TYPES.map((type) => (\n                    <Radio\n                      key={type}\n                      id={type}\n                      data-testid={type}\n                      isChecked={field.value === type}\n                      name=\"otpPolicyType\"\n                      onChange={() => field.onChange(type)}\n                      label={t(`policyType.${type}`)}\n                      className=\"keycloak__otp_policies_authentication__policy-type\"\n                    />\n                  ))}\n                </>\n              )}\n            />\n          </FormGroup>\n          <SelectControl\n            name=\"otpPolicyAlgorithm\"\n            label={t(\"otpHashAlgorithm\")}\n            labelIcon={t(\"otpHashAlgorithmHelp\")}\n            options={OTP_HASH_ALGORITHMS.map((type) => ({\n              key: `Hmac${type}`,\n              value: type,\n            }))}\n            controller={{ defaultValue: `Hmac${OTP_HASH_ALGORITHMS[0]}` }}\n          />\n          <FormGroup\n            label={t(\"otpPolicyDigits\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"otpPolicyDigitsHelp\")}\n                fieldLabelId=\"otpPolicyDigits\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Controller\n              name=\"otpPolicyDigits\"\n              data-testid=\"otpPolicyDigits\"\n              defaultValue={NUMBER_OF_DIGITS[0]}\n              control={control}\n              render={({ field }) => (\n                <>\n                  {NUMBER_OF_DIGITS.map((type) => (\n                    <Radio\n                      key={type}\n                      id={`digit-${type}`}\n                      data-testid={`digit-${type}`}\n                      isChecked={field.value === type}\n                      name=\"otpPolicyDigits\"\n                      onChange={() => field.onChange(type)}\n                      label={type}\n                      className=\"keycloak__otp_policies_authentication__number-of-digits\"\n                    />\n                  ))}\n                </>\n              )}\n            />\n          </FormGroup>\n          <NumberControl\n            name=\"otpPolicyLookAheadWindow\"\n            label={t(\"lookAround\")}\n            labelIcon={t(\"lookAroundHelp\")}\n            controller={{ defaultValue: 1, rules: { min: 0 } }}\n          />\n          {otpType === POLICY_TYPES[0] && (\n            <TimeSelectorControl\n              name=\"otpPolicyPeriod\"\n              label={t(\"otpPolicyPeriod\")}\n              labelIcon={t(\"otpPolicyPeriodHelp\")}\n              units={[\"second\", \"minute\"]}\n              controller={{\n                defaultValue: 30,\n                rules: {\n                  min: 1,\n                  max: {\n                    value: 120,\n                    message: t(\"maxLength\", { length: \"2 \" + t(\"minutes\") }),\n                  },\n                },\n              }}\n            />\n          )}\n          {otpType === POLICY_TYPES[1] && (\n            <NumberControl\n              name=\"otpPolicyInitialCounter\"\n              label={t(\"initialCounter\")}\n              labelIcon={t(\"initialCounterHelp\")}\n              controller={{ defaultValue: 30, rules: { min: 1, max: 120 } }}\n            />\n          )}\n          <FormGroup\n            label={t(\"supportedApplications\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"supportedApplicationsHelp\")}\n                fieldLabelId=\"supportedApplications\"\n              />\n            }\n          >\n            <span data-testid=\"supportedApplications\">\n              <ChipGroup>\n                {supportedApplications.map((label) => (\n                  <Chip key={label} isReadOnly>\n                    {label}\n                  </Chip>\n                ))}\n              </ChipGroup>\n            </span>\n          </FormGroup>\n\n          {otpType === POLICY_TYPES[0] && (\n            <SwitchControl\n              name=\"otpPolicyCodeReusable\"\n              label={t(\"otpPolicyCodeReusable\")}\n              labelIcon={t(\"otpPolicyCodeReusableHelp\")}\n              labelOn={t(\"on\")}\n              labelOff={t(\"off\")}\n            />\n          )}\n\n          <ActionGroup>\n            <Button\n              data-testid=\"save\"\n              variant=\"primary\"\n              type=\"submit\"\n              isDisabled={!isValid || !isDirty}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button\n              data-testid=\"reload\"\n              variant={ButtonVariant.link}\n              onClick={() => reset({ ...realm })}\n            >\n              {t(\"reload\")}\n            </Button>\n          </ActionGroup>\n        </FormProvider>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\nimport {\n  Button,\n  FormGroup,\n  NumberInput,\n  Split,\n  SplitItem,\n  Switch,\n  TextInput,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormErrorText, HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\nimport \"./policy-row.css\";\n\ntype PolicyRowProps = {\n  policy: PasswordPolicyTypeRepresentation;\n  onRemove: (id?: string) => void;\n};\n\nexport const PolicyRow = ({\n  policy: { id, configType, defaultValue, displayName },\n  onRemove,\n}: PolicyRowProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = useFormContext();\n\n  const error = errors[id!];\n\n  return (\n    <FormGroup\n      label={displayName}\n      fieldId={id!}\n      isRequired\n      labelIcon={\n        <HelpItem\n          helpText={t(`passwordPoliciesHelp.${id}`)}\n          fieldLabelId={id!}\n        />\n      }\n    >\n      <Split>\n        <SplitItem isFilled>\n          {configType && configType !== \"int\" && (\n            <TextInput\n              id={id}\n              data-testid={id}\n              {...register(id!, { required: true })}\n              defaultValue={defaultValue}\n              validated={\n                error ? ValidatedOptions.error : ValidatedOptions.default\n              }\n            />\n          )}\n          {configType === \"int\" && (\n            <Controller\n              name={id!}\n              defaultValue={Number.parseInt(defaultValue || \"0\")}\n              control={control}\n              render={({ field }) => {\n                const MIN_VALUE = 0;\n                const setValue = (newValue: number) =>\n                  field.onChange(Math.max(newValue, MIN_VALUE));\n                const value = Number(field.value);\n\n                return (\n                  <NumberInput\n                    id={id}\n                    value={value}\n                    min={MIN_VALUE}\n                    onPlus={() => setValue(value + 1)}\n                    onMinus={() => setValue(value - 1)}\n                    onChange={(event) => {\n                      const newValue = Number(event.currentTarget.value);\n                      setValue(!isNaN(newValue) ? newValue : 0);\n                    }}\n                    className=\"keycloak__policies_authentication__number-field\"\n                  />\n                );\n              }}\n            />\n          )}\n          {!configType && (\n            <Switch\n              id={id!}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked\n              isDisabled\n              aria-label={displayName}\n            />\n          )}\n        </SplitItem>\n        <SplitItem>\n          <Button\n            data-testid={`remove-${id}`}\n            variant=\"link\"\n            className=\"keycloak__policies_authentication__minus-icon\"\n            onClick={() => onRemove(id)}\n            aria-label={t(\"remove\")}\n          >\n            <MinusCircleIcon />\n          </Button>\n        </SplitItem>\n      </Split>\n      {error && <FormErrorText message={t(\"required\")} />}\n    </FormGroup>\n  );\n};\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\n\nexport type SubmittedValues = {\n  [index: string]: string;\n};\n\nconst POLICY_SEPARATOR = \" and \";\n\nexport const serializePolicy = (\n  policies: PasswordPolicyTypeRepresentation[],\n  submitted: SubmittedValues,\n) =>\n  policies\n    .map((policy) => `${policy.id}(${submitted[policy.id!]})`)\n    .join(POLICY_SEPARATOR);\n\ntype PolicyValue = PasswordPolicyTypeRepresentation & {\n  value?: string;\n};\n\nexport const parsePolicy = (\n  value: string,\n  policies: PasswordPolicyTypeRepresentation[],\n) =>\n  value\n    .split(POLICY_SEPARATOR)\n    .map(parsePolicyToken)\n    .reduce<PolicyValue[]>((result, { id, value }) => {\n      const matchingPolicy = policies.find((policy) => policy.id === id);\n\n      if (!matchingPolicy) {\n        return result;\n      }\n\n      return result.concat({ ...matchingPolicy, value });\n    }, []);\n\ntype PolicyTokenParsed = {\n  id: string;\n  value?: string;\n};\n\nfunction parsePolicyToken(token: string): PolicyTokenParsed {\n  const valueStart = token.indexOf(\"(\");\n\n  if (valueStart === -1) {\n    return { id: token.trim() };\n  }\n\n  const id = token.substring(0, valueStart).trim();\n  const valueEnd = token.lastIndexOf(\")\");\n\n  if (valueEnd === -1) {\n    return { id };\n  }\n\n  const value = token.substring(valueStart + 1, valueEnd).trim();\n\n  return { id, value };\n}\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateFooter,\n  EmptyStateHeader,\n  EmptyStateIcon,\n  PageSection,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Select,\n  MenuToggle,\n  SelectList,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { PolicyRow } from \"./PolicyRow\";\nimport { SubmittedValues, parsePolicy, serializePolicy } from \"./util\";\n\ntype PolicySelectProps = {\n  onSelect: (row: PasswordPolicyTypeRepresentation) => void;\n  selectedPolicies: PasswordPolicyTypeRepresentation[];\n};\n\nconst PolicySelect = ({ onSelect, selectedPolicies }: PolicySelectProps) => {\n  const { t } = useTranslation();\n  const { passwordPolicies } = useServerInfo();\n  const [open, setOpen] = useState(false);\n\n  const policies = useMemo(\n    () =>\n      passwordPolicies?.filter(\n        (p) => selectedPolicies.find((o) => o.id === p.id) === undefined,\n      ),\n    [selectedPolicies],\n  );\n\n  return (\n    <Select\n      onSelect={(_, selection) => {\n        onSelect(selection as PasswordPolicyTypeRepresentation);\n        setOpen(false);\n      }}\n      toggle={(ref) => (\n        <MenuToggle\n          ref={ref}\n          onClick={() => setOpen(!open)}\n          isExpanded={open}\n          isDisabled={policies?.length === 0}\n          style={{ width: \"300px\" }}\n          data-testid=\"add-policy\"\n        >\n          {t(\"addPolicy\")}\n        </MenuToggle>\n      )}\n      isOpen={open}\n    >\n      <SelectList>\n        {policies?.map((policy) => (\n          <SelectOption key={policy.id} value={policy}>\n            {policy.displayName}\n          </SelectOption>\n        ))}\n      </SelectList>\n    </Select>\n  );\n};\n\ntype PasswordPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\nexport const PasswordPolicy = ({\n  realm,\n  realmUpdated,\n}: PasswordPolicyProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { passwordPolicies } = useServerInfo();\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const [rows, setRows] = useState<PasswordPolicyTypeRepresentation[]>([]);\n  const onSelect = (row: PasswordPolicyTypeRepresentation) => {\n    setRows([...rows, row]);\n    setValue(row.id!, row.defaultValue!, { shouldDirty: true });\n  };\n\n  const form = useForm<SubmittedValues>({\n    defaultValues: {},\n  });\n  const {\n    handleSubmit,\n    setValue,\n    reset,\n    formState: { isDirty },\n  } = form;\n\n  const setupForm = (realm: RealmRepresentation) => {\n    reset();\n    const values = parsePolicy(realm.passwordPolicy || \"\", passwordPolicies!);\n    values.forEach((v) => {\n      setValue(v.id!, v.value!);\n    });\n    setRows(values);\n  };\n\n  useEffect(() => setupForm(realm), []);\n\n  const save = async (values: SubmittedValues) => {\n    const updatedRealm = {\n      ...realm,\n      passwordPolicy: serializePolicy(rows, values),\n    };\n    try {\n      await adminClient.realms.update({ realm: realmName }, updatedRealm);\n      realmUpdated(updatedRealm);\n      setupForm(updatedRealm);\n      addAlert(t(\"updatePasswordPolicySuccess\"), AlertVariant.success);\n    } catch (error: any) {\n      addError(\"updatePasswordPolicyError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      {(rows.length !== 0 || realm.passwordPolicy) && (\n        <>\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem>\n                <PolicySelect onSelect={onSelect} selectedPolicies={rows} />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n          <Divider />\n          <PageSection variant=\"light\">\n            <FormProvider {...form}>\n              <FormAccess\n                className=\"keycloak__policies_authentication__form\"\n                role=\"manage-realm\"\n                isHorizontal\n                onSubmit={handleSubmit(save)}\n              >\n                {rows.map((r, index) => (\n                  <PolicyRow\n                    key={`${r.id}-${index}`}\n                    policy={r}\n                    onRemove={(id) => {\n                      setRows(rows.filter((r) => r.id !== id));\n                      setValue(r.id!, \"\", { shouldDirty: true });\n                    }}\n                  />\n                ))}\n                <ActionGroup>\n                  <Button\n                    data-testid=\"save\"\n                    variant=\"primary\"\n                    type=\"submit\"\n                    isDisabled={!isDirty}\n                  >\n                    {t(\"save\")}\n                  </Button>\n                  <Button\n                    data-testid=\"reload\"\n                    variant={ButtonVariant.link}\n                    onClick={() => setupForm(realm)}\n                  >\n                    {t(\"reload\")}\n                  </Button>\n                </ActionGroup>\n              </FormAccess>\n            </FormProvider>\n          </PageSection>\n        </>\n      )}\n      {!rows.length && !realm.passwordPolicy && (\n        <EmptyState data-testid=\"empty-state\" variant=\"lg\">\n          <EmptyStateHeader\n            titleText={<>{t(\"noPasswordPolicies\")}</>}\n            icon={<EmptyStateIcon icon={PlusCircleIcon} />}\n            headingLevel=\"h1\"\n          />\n          <EmptyStateBody>{t(\"noPasswordPoliciesInstructions\")}</EmptyStateBody>\n          <EmptyStateFooter>\n            <EmptyStateActions>\n              <PolicySelect onSelect={onSelect} selectedPolicies={[]} />\n            </EmptyStateActions>\n          </EmptyStateFooter>\n        </EmptyState>\n      )}\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  FormGroup,\n  PageSection,\n  Popover,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  HelpItem,\n  SelectControl,\n  SwitchControl,\n  TextControl,\n  useHelp,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { TimeSelectorControl } from \"../../components/time-selector/TimeSelectorControl\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\n\nimport { useAdminClient } from \"../../admin-client\";\nimport \"./webauthn-policy.css\";\n\nconst SIGNATURE_ALGORITHMS = [\n  \"ES256\",\n  \"ES384\",\n  \"ES512\",\n  \"RS256\",\n  \"RS384\",\n  \"RS512\",\n  \"Ed25519\",\n  \"RS1\",\n] as const;\nconst ATTESTATION_PREFERENCE = [\n  \"not specified\",\n  \"none\",\n  \"indirect\",\n  \"direct\",\n] as const;\n\nconst AUTHENTICATOR_ATTACHMENT = [\n  \"not specified\",\n  \"platform\",\n  \"cross-platform\",\n] as const;\n\nconst RESIDENT_KEY_OPTIONS = [\"not specified\", \"Yes\", \"No\"] as const;\n\nconst USER_VERIFY = [\n  \"not specified\",\n  \"required\",\n  \"preferred\",\n  \"discouraged\",\n] as const;\n\ntype WeauthnSelectProps = {\n  name: string;\n  label: string;\n  options: readonly string[];\n  labelPrefix?: string;\n  isMultiSelect?: boolean;\n};\n\nconst WebauthnSelect = ({\n  name,\n  label,\n  options,\n  labelPrefix,\n  isMultiSelect = false,\n}: WeauthnSelectProps) => {\n  const { t } = useTranslation();\n  return (\n    <SelectControl\n      name={name}\n      label={t(label)}\n      variant={isMultiSelect ? \"typeaheadMulti\" : \"single\"}\n      controller={{ defaultValue: options[0] }}\n      options={options.map((option) => ({\n        key: option,\n        value: labelPrefix ? t(`${labelPrefix}.${option}`) : option,\n      }))}\n    />\n  );\n};\n\ntype WebauthnPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n  isPasswordLess?: boolean;\n};\n\nexport const WebauthnPolicy = ({\n  realm,\n  realmUpdated,\n  isPasswordLess = false,\n}: WebauthnPolicyProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const { enabled } = useHelp();\n  const form = useForm({ mode: \"onChange\" });\n  const {\n    setValue,\n    handleSubmit,\n    formState: { isDirty },\n  } = form;\n\n  const namePrefix = isPasswordLess\n    ? \"webAuthnPolicyPasswordless\"\n    : \"webAuthnPolicy\";\n\n  const setupForm = (realm: RealmRepresentation) =>\n    convertToFormValues(realm, setValue);\n\n  useEffect(() => setupForm(realm), []);\n\n  const onSubmit = async (realm: RealmRepresentation) => {\n    const submittedRealm = convertFormValuesToObject(realm);\n    try {\n      await adminClient.realms.update({ realm: realmName }, submittedRealm);\n      realmUpdated(submittedRealm);\n      setupForm(submittedRealm);\n      addAlert(t(\"webAuthnUpdateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"webAuthnUpdateError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      {enabled && (\n        <Popover bodyContent={t(`${namePrefix}FormHelp`)}>\n          <TextContent className=\"keycloak__section_intro__help\">\n            <Text>\n              <QuestionCircleIcon /> {t(\"webauthnIntro\")}\n            </Text>\n          </TextContent>\n        </Popover>\n      )}\n\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"keycloak__webauthn_policies_authentication__form\"\n      >\n        <FormProvider {...form}>\n          <TextControl\n            name={`${namePrefix}RpEntityName`}\n            label={t(\"webAuthnPolicyRpEntityName\")}\n            labelIcon={t(\"webAuthnPolicyRpEntityNameHelp\")}\n            rules={{ required: { value: true, message: t(\"required\") } }}\n          />\n          <WebauthnSelect\n            name={`${namePrefix}SignatureAlgorithms`}\n            label=\"webAuthnPolicySignatureAlgorithms\"\n            options={SIGNATURE_ALGORITHMS}\n            isMultiSelect\n          />\n          <TextControl\n            name={`${namePrefix}RpId`}\n            label={t(\"webAuthnPolicyRpId\")}\n            labelIcon={t(\"webAuthnPolicyRpIdHelp\")}\n          />\n          <WebauthnSelect\n            name={`${namePrefix}AttestationConveyancePreference`}\n            label=\"webAuthnPolicyAttestationConveyancePreference\"\n            options={ATTESTATION_PREFERENCE}\n            labelPrefix=\"attestationPreference\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}AuthenticatorAttachment`}\n            label=\"webAuthnPolicyAuthenticatorAttachment\"\n            options={AUTHENTICATOR_ATTACHMENT}\n            labelPrefix=\"authenticatorAttachment\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}RequireResidentKey`}\n            label=\"webAuthnPolicyRequireResidentKey\"\n            options={RESIDENT_KEY_OPTIONS}\n            labelPrefix=\"residentKey\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}UserVerificationRequirement`}\n            label=\"webAuthnPolicyUserVerificationRequirement\"\n            options={USER_VERIFY}\n            labelPrefix=\"userVerify\"\n          />\n          <TimeSelectorControl\n            name={`${namePrefix}CreateTimeout`}\n            label={t(\"webAuthnPolicyCreateTimeout\")}\n            labelIcon={t(\"otpPolicyPeriodHelp\")}\n            units={[\"second\", \"minute\", \"hour\"]}\n            controller={{\n              defaultValue: 0,\n              rules: {\n                min: 0,\n                max: {\n                  value: 31536,\n                  message: t(\"webAuthnPolicyCreateTimeoutHint\"),\n                },\n              },\n            }}\n          />\n          <SwitchControl\n            name={`${namePrefix}AvoidSameAuthenticatorRegister`}\n            label={t(\"webAuthnPolicyAvoidSameAuthenticatorRegister\")}\n            labelIcon={t(\"webAuthnPolicyAvoidSameAuthenticatorRegisterHelp\")}\n            labelOn={t(\"on\")}\n            labelOff={t(\"off\")}\n          />\n          <FormGroup\n            label={t(\"webAuthnPolicyAcceptableAaguids\")}\n            fieldId=\"webAuthnPolicyAcceptableAaguids\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"webAuthnPolicyAcceptableAaguidsHelp\")}\n                fieldLabelId=\"webAuthnPolicyAcceptableAaguids\"\n              />\n            }\n          >\n            <MultiLineInput\n              name={`${namePrefix}AcceptableAaguids`}\n              aria-label={t(\"webAuthnPolicyAcceptableAaguids\")}\n              addButtonLabel=\"addAaguids\"\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"webAuthnPolicyExtraOrigins\")}\n            fieldId=\"webAuthnPolicyExtraOrigins\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"webAuthnPolicyExtraOriginsHelp\")}\n                fieldLabelId=\"webAuthnPolicyExtraOrigins\"\n              />\n            }\n          >\n            <MultiLineInput\n              name={`${namePrefix}ExtraOrigins`}\n              aria-label={t(\"webAuthnPolicyExtraOrigins\")}\n              addButtonLabel=\"addOrigins\"\n            />\n          </FormGroup>\n        </FormProvider>\n\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => setupForm(realm)}\n          >\n            {t(\"reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { CibaPolicy } from \"./CibaPolicy\";\nimport { OtpPolicy } from \"./OtpPolicy\";\nimport { PasswordPolicy } from \"./PasswordPolicy\";\nimport { WebauthnPolicy } from \"./WebauthnPolicy\";\n\nexport const Policies = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [subTab, setSubTab] = useState(1);\n  const { realm: realmName } = useRealm();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(\n    async () => {\n      const realm = await adminClient.realms.findOne({ realm: realmName });\n      if (!realm) {\n        throw new Error(t(\"notFound\"));\n      }\n      return realm;\n    },\n    (realm) => {\n      setRealm(realm);\n    },\n    [],\n  );\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <Tabs\n      activeKey={subTab}\n      onSelect={(_, key) => setSubTab(key as number)}\n      mountOnEnter\n      unmountOnExit\n    >\n      <Tab\n        id=\"passwordPolicy\"\n        eventKey={1}\n        title={<TabTitleText>{t(\"passwordPolicy\")}</TabTitleText>}\n      >\n        <PasswordPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"otpPolicy\"\n        eventKey={2}\n        title={<TabTitleText>{t(\"otpPolicy\")}</TabTitleText>}\n      >\n        <OtpPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"webauthnPolicy\"\n        eventKey={3}\n        title={<TabTitleText>{t(\"webauthnPolicy\")}</TabTitleText>}\n      >\n        <WebauthnPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"webauthnPasswordlessPolicy\"\n        eventKey={4}\n        title={<TabTitleText>{t(\"webauthnPasswordlessPolicy\")}</TabTitleText>}\n      >\n        <WebauthnPolicy realm={realm} realmUpdated={setRealm} isPasswordLess />\n      </Tab>\n      <Tab\n        data-testid=\"tab-ciba-policy\"\n        eventKey={5}\n        title={<TabTitleText>{t(\"cibaPolicy\")}</TabTitleText>}\n      >\n        <CibaPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n    </Tabs>\n  );\n};\n","import { fetchWithError } from \"@keycloak/keycloak-admin-client\";\nimport type AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { addTrailingSlash } from \"../util\";\nimport { getAuthorizationHeaders } from \"../utils/getAuthorizationHeaders\";\nimport useLocaleSort, { mapByKey } from \"../utils/useLocaleSort\";\nimport useToggle from \"../utils/useToggle\";\nimport { BindFlowDialog } from \"./BindFlowDialog\";\nimport { DuplicateFlowModal } from \"./DuplicateFlowModal\";\nimport { RequiredActions } from \"./RequiredActions\";\nimport { UsedBy } from \"./components/UsedBy\";\nimport { Policies } from \"./policies/Policies\";\nimport { AuthenticationTab, toAuthentication } from \"./routes/Authentication\";\nimport { toCreateFlow } from \"./routes/CreateFlow\";\nimport { toFlow } from \"./routes/Flow\";\n\ntype UsedBy = \"SPECIFIC_CLIENTS\" | \"SPECIFIC_PROVIDERS\" | \"DEFAULT\";\n\nexport type AuthenticationType = AuthenticationFlowRepresentation & {\n  usedBy?: { type?: UsedBy; values: string[] };\n  realm: RealmRepresentation;\n};\n\nexport const REALM_FLOWS = new Map<string, string>([\n  [\"browserFlow\", \"browser\"],\n  [\"registrationFlow\", \"registration\"],\n  [\"directGrantFlow\", \"direct grant\"],\n  [\"resetCredentialsFlow\", \"reset credentials\"],\n  [\"clientAuthenticationFlow\", \"clients\"],\n  [\"dockerAuthenticationFlow\", \"docker auth\"],\n  [\"firstBrokerLoginFlow\", \"firstBrokerLogin\"],\n]);\n\nconst AliasRenderer = ({ id, alias, usedBy, builtIn }: AuthenticationType) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  return (\n    <>\n      <Link\n        to={toFlow({\n          realm,\n          id: id!,\n          usedBy: usedBy?.type || \"notInUse\",\n          builtIn: builtIn ? \"builtIn\" : undefined,\n        })}\n        key={`link-${id}`}\n      >\n        {alias}\n      </Link>{\" \"}\n      {builtIn && <Label key={`label-${id}`}>{t(\"buildIn\")}</Label>}\n    </>\n  );\n};\n\nexport default function AuthenticationSection() {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { realm: realmName, realmRepresentation: realm } = useRealm();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const { addAlert, addError } = useAlerts();\n  const localeSort = useLocaleSort();\n  const [selectedFlow, setSelectedFlow] = useState<AuthenticationType>();\n  const [open, toggleOpen] = useToggle();\n  const [bindFlowOpen, toggleBindFlow] = useToggle();\n\n  const loader = async () => {\n    const flowsRequest = await fetchWithError(\n      `${addTrailingSlash(\n        adminClient.baseUrl,\n      )}admin/realms/${realmName}/ui-ext/authentication-management/flows`,\n      {\n        method: \"GET\",\n        headers: getAuthorizationHeaders(await adminClient.getAccessToken()),\n      },\n    );\n    const flows = await flowsRequest.json();\n\n    if (!flows) {\n      return [];\n    }\n\n    return sortBy(\n      localeSort<AuthenticationType>(flows, mapByKey(\"alias\")),\n      (flow) => flow.usedBy?.type,\n    );\n  };\n\n  const useTab = (tab: AuthenticationTab) =>\n    useRoutableTab(toAuthentication({ realm: realmName, tab }));\n\n  const flowsTab = useTab(\"flows\");\n  const requiredActionsTab = useTab(\"required-actions\");\n  const policiesTab = useTab(\"policies\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteConfirmFlow\",\n    children: (\n      <Trans i18nKey=\"deleteConfirmFlowMessage\">\n        {\" \"}\n        <strong>{{ flow: selectedFlow ? selectedFlow.alias : \"\" }}</strong>.\n      </Trans>\n    ),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.authenticationManagement.deleteFlow({\n          flowId: selectedFlow!.id!,\n        });\n        refresh();\n        addAlert(t(\"deleteFlowSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteFlowError\", error);\n      }\n    },\n  });\n\n  if (!realm) return <KeycloakSpinner />;\n\n  return (\n    <>\n      <DeleteConfirm />\n      {open && (\n        <DuplicateFlowModal\n          name={selectedFlow ? selectedFlow.alias! : \"\"}\n          description={selectedFlow?.description!}\n          toggleDialog={toggleOpen}\n          onComplete={() => {\n            refresh();\n            toggleOpen();\n          }}\n        />\n      )}\n      {bindFlowOpen && (\n        <BindFlowDialog\n          onClose={() => {\n            toggleBindFlow();\n            refresh();\n          }}\n          flowAlias={selectedFlow?.alias!}\n        />\n      )}\n      <ViewHeader\n        titleKey=\"titleAuthentication\"\n        subKey=\"authenticationExplain\"\n        helpUrl={helpUrls.authenticationUrl}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n        <RoutableTabs\n          isBox\n          defaultLocation={toAuthentication({ realm: realmName, tab: \"flows\" })}\n        >\n          <Tab\n            data-testid=\"flows\"\n            title={<TabTitleText>{t(\"flows\")}</TabTitleText>}\n            {...flowsTab}\n          >\n            <KeycloakDataTable\n              key={key}\n              loader={loader}\n              ariaLabelKey=\"titleAuthentication\"\n              searchPlaceholderKey=\"searchForFlow\"\n              toolbarItem={\n                <ToolbarItem>\n                  <Button\n                    component={(props) => (\n                      <Link\n                        {...props}\n                        to={toCreateFlow({ realm: realmName })}\n                      />\n                    )}\n                  >\n                    {t(\"createFlow\")}\n                  </Button>\n                </ToolbarItem>\n              }\n              actionResolver={({ data }) => [\n                {\n                  title: t(\"duplicate\"),\n                  onClick: () => {\n                    toggleOpen();\n                    setSelectedFlow(data);\n                  },\n                },\n                ...(data.usedBy?.type !== \"DEFAULT\"\n                  ? [\n                      {\n                        title: t(\"bindFlow\"),\n                        onClick: () => {\n                          toggleBindFlow();\n                          setSelectedFlow(data);\n                        },\n                      },\n                    ]\n                  : []),\n                ...(!data.builtIn && !data.usedBy\n                  ? [\n                      {\n                        title: t(\"delete\"),\n                        onClick: () => {\n                          setSelectedFlow(data);\n                          toggleDeleteDialog();\n                        },\n                      },\n                    ]\n                  : []),\n              ]}\n              columns={[\n                {\n                  name: \"alias\",\n                  displayKey: \"flowName\",\n                  cellRenderer: (row) => <AliasRenderer {...row} />,\n                },\n                {\n                  name: \"usedBy\",\n                  displayKey: \"usedBy\",\n                  cellRenderer: (row) => <UsedBy authType={row} />,\n                },\n                {\n                  name: \"description\",\n                  displayKey: \"description\",\n                },\n              ]}\n              emptyState={\n                <ListEmptyState\n                  message={t(\"emptyEvents\")}\n                  instructions={t(\"emptyEventsInstructions\")}\n                />\n              }\n            />\n          </Tab>\n          <Tab\n            data-testid=\"requiredActions\"\n            title={<TabTitleText>{t(\"requiredActions\")}</TabTitleText>}\n            {...requiredActionsTab}\n          >\n            <RequiredActions />\n          </Tab>\n          <Tab\n            data-testid=\"policies\"\n            title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n            {...policiesTab}\n          >\n            <Policies />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["CogIconConfig","CogIcon","createIcon","BindFlowDialog","flowAlias","onClose","adminClient","useAdminClient","useTranslation","form","useForm","addAlert","addError","useAlerts","realm","realmRep","refresh","useRealm","onSubmit","bindingType","AlertVariant","error","flowKeys","REALM_FLOWS","jsx","Modal","Button","ButtonVariant","Form","FormProvider","SelectControl","f","key","DuplicateFlowModal","name","description","toggleDialog","onComplete","t","setValue","getValues","handleSubmit","navigate","useNavigate","useEffect","newFlow","flow","toFlow","ModalVariant","NameDescription","RequiredActionConfigModal","requiredAction","configDescription","setConfigDescription","useState","setupForm","config","convertToFormValues","useFetch","save","saved","newConfig","convertFormValuesToObject","DynamicComponents","ActionGroup","jsxs","TrashIcon","RequiredActions","actions","setActions","selectedAction","setSelectedAction","setKey","realmName","loadActions","fetchWithError","addTrailingSlash","getAuthorizationHeaders","requiredActions","unregisteredRequiredActions","action","isUnregisteredAction","data","updateAction","field","executeMove","times","alias","index","Fragment","DraggableTable","nameDragged","items","keys","e","newIndex","oldIndex","dragged","row","Switch","toKey","KeycloakSpinner","Label","label","CheckCircleIcon","style","UsedByModal","id","isSpecificClient","loader","first","max","search","fetchUsedBy","p","TextContent","Text","TextVariants","KeycloakDataTable","UsedBy","usedBy","open","toggle","useToggle","Popover","used","CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES","CIBA_EXPIRES_IN_MIN","CIBA_EXPIRES_IN_MAX","CIBA_INTERVAL_MIN","CIBA_INTERVAL_MAX","CibaPolicy","realmUpdated","formValues","updatedRealm","PageSection","FormAccess","mode","TextControl","POLICY_TYPES","OTP_HASH_ALGORITHMS","NUMBER_OF_DIGITS","OtpPolicy","control","reset","isValid","isDirty","localeSort","useLocaleSort","otpType","useWatch","supportedApplications","useMemo","labels","FormGroup","HelpItem","Controller","type","Radio","NumberControl","TimeSelectorControl","ChipGroup","Chip","SwitchControl","PolicyRow","configType","defaultValue","displayName","onRemove","register","errors","useFormContext","Split","SplitItem","TextInput","ValidatedOptions","newValue","value","NumberInput","event","MinusCircleIcon","FormErrorText","POLICY_SEPARATOR","serializePolicy","policies","submitted","policy","parsePolicy","parsePolicyToken","result","matchingPolicy","token","valueStart","valueEnd","PolicySelect","onSelect","selectedPolicies","passwordPolicies","useServerInfo","setOpen","o","Select","_","selection","ref","MenuToggle","SelectList","SelectOption","PasswordPolicy","rows","setRows","values","v","Toolbar","ToolbarContent","ToolbarItem","Divider","r","EmptyState","EmptyStateHeader","EmptyStateIcon","PlusCircleIcon","EmptyStateBody","EmptyStateFooter","EmptyStateActions","SIGNATURE_ALGORITHMS","ATTESTATION_PREFERENCE","AUTHENTICATOR_ATTACHMENT","RESIDENT_KEY_OPTIONS","USER_VERIFY","WebauthnSelect","options","labelPrefix","isMultiSelect","option","WebauthnPolicy","isPasswordLess","enabled","useHelp","namePrefix","submittedRealm","QuestionCircleIcon","MultiLineInput","Policies","subTab","setSubTab","setRealm","Tabs","Tab","TabTitleText","AliasRenderer","builtIn","Link","AuthenticationSection","selectedFlow","setSelectedFlow","toggleOpen","bindFlowOpen","toggleBindFlow","flows","sortBy","mapByKey","useTab","tab","useRoutableTab","toAuthentication","flowsTab","requiredActionsTab","policiesTab","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","Trans","ViewHeader","helpUrls","RoutableTabs","props","toCreateFlow","ListEmptyState"],"mappings":"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","x_google_ignoreList":[0]}