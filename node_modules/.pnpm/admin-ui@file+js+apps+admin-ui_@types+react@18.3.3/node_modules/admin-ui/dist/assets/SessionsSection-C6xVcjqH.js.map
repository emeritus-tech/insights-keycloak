{"version":3,"file":"SessionsSection-C6xVcjqH.js","sources":["../../src/sessions/RevocationModal.tsx","../../src/sessions/SessionsSection.tsx"],"sourcesContent":["import type GlobalRequestResult from \"@keycloak/keycloak-admin-client/lib/defs/globalRequestResult\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  TextContent,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\ntype RevocationModalProps = {\n  handleModalToggle: () => void;\n  save: () => void;\n};\n\nexport const RevocationModal = ({\n  handleModalToggle,\n  save,\n}: RevocationModalProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  const { realm: realmName, realmRepresentation: realm, refresh } = useRealm();\n  const { register, handleSubmit } = useForm();\n\n  const parseResult = (result: GlobalRequestResult, prefixKey: string) => {\n    const successCount = result.successRequests?.length || 0;\n    const failedCount = result.failedRequests?.length || 0;\n\n    if (successCount === 0 && failedCount === 0) {\n      addAlert(t(\"noAdminUrlSet\"), AlertVariant.warning);\n    } else if (failedCount > 0) {\n      addAlert(\n        t(\"\" + prefixKey + \"Success\", {\n          successNodes: result.successRequests,\n        }),\n        AlertVariant.success,\n      );\n      addAlert(\n        t(\"\" + prefixKey + \"Fail\", {\n          failedNodes: result.failedRequests,\n        }),\n        AlertVariant.danger,\n      );\n    } else {\n      addAlert(\n        t(\"\" + prefixKey + \"Success\", {\n          successNodes: result.successRequests,\n        }),\n        AlertVariant.success,\n      );\n    }\n  };\n\n  const setToNow = async () => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          realm: realmName,\n          notBefore: Date.now() / 1000,\n        },\n      );\n\n      addAlert(t(\"notBeforeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addAlert(t(\"setToNowError\", { error }), AlertVariant.danger);\n    }\n  };\n\n  const clearNotBefore = async () => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          realm: realmName,\n          notBefore: 0,\n        },\n      );\n      addAlert(t(\"notBeforeClearedSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addAlert(t(\"notBeforeError\", { error }), AlertVariant.danger);\n    }\n  };\n\n  const push = async () => {\n    const result = await adminClient.realms.pushRevocation({\n      realm: realmName,\n    });\n    parseResult(result, \"notBeforePush\");\n\n    refresh();\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"revocation\")}\n      isOpen={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          data-testid=\"set-to-now-button\"\n          key=\"set-to-now\"\n          variant=\"tertiary\"\n          onClick={() => {\n            setToNow();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"setToNow\")}\n        </Button>,\n        <Button\n          data-testid=\"clear-not-before-button\"\n          key=\"clear\"\n          variant=\"tertiary\"\n          onClick={() => {\n            clearNotBefore();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"clear\")}\n        </Button>,\n        <Button\n          data-testid=\"modal-test-connection-button\"\n          key=\"push\"\n          variant=\"secondary\"\n          onClick={() => {\n            push();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"push\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            handleModalToggle();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent className=\"kc-revocation-description-text\">\n        {t(\"revocationDescription\")}\n      </TextContent>\n      <Form\n        id=\"revocation-modal-form\"\n        isHorizontal\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          className=\"kc-revocation-modal-form-group\"\n          label={t(\"notBefore\")}\n          name=\"notBefore\"\n          fieldId=\"not-before\"\n        >\n          <TextInput\n            data-testid=\"not-before-input\"\n            autoFocus\n            readOnly\n            value={\n              realm?.notBefore === 0\n                ? (t(\"none\") as string)\n                : new Date(realm?.notBefore! * 1000).toString()\n            }\n            type=\"text\"\n            id=\"not-before\"\n            {...register(\"notBefore\")}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import UserSessionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userSessionRepresentation\";\nimport { KeycloakSelect } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  DropdownItem,\n  PageSection,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { fetchAdminUI } from \"../context/auth/admin-ui-endpoint\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport useToggle from \"../utils/useToggle\";\nimport { RevocationModal } from \"./RevocationModal\";\nimport SessionsTable from \"./SessionsTable\";\n\nimport \"./SessionsSection.css\";\n\ntype FilterType = \"ALL\" | \"REGULAR\" | \"OFFLINE\";\n\ntype SessionFilterProps = {\n  filterType: FilterType;\n  onChange: (filterType: FilterType) => void;\n};\n\nconst SessionFilter = ({ filterType, onChange }: SessionFilterProps) => {\n  const { t } = useTranslation();\n\n  const [open, toggle] = useToggle();\n\n  return (\n    <KeycloakSelect\n      data-testid=\"filter-session-type-select\"\n      isOpen={open}\n      onToggle={toggle}\n      toggleIcon={<FilterIcon />}\n      onSelect={(value) => {\n        const filter = value as FilterType;\n        onChange(filter);\n        toggle();\n      }}\n      selections={filterType}\n    >\n      <SelectOption data-testid=\"all-sessions-option\" value=\"ALL\">\n        {t(\"sessionsType.allSessions\")}\n      </SelectOption>\n      <SelectOption data-testid=\"regular-sso-option\" value=\"REGULAR\">\n        {t(\"sessionsType.regularSSO\")}\n      </SelectOption>\n      <SelectOption data-testid=\"offline-option\" value=\"OFFLINE\">\n        {t(\"sessionsType.offline\")}\n      </SelectOption>\n    </KeycloakSelect>\n  );\n};\n\nexport default function SessionsSection() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const { addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [revocationModalOpen, setRevocationModalOpen] = useState(false);\n  const [filterType, setFilterType] = useState<FilterType>(\"ALL\");\n  const [noSessions, setNoSessions] = useState(false);\n\n  const handleRevocationModalToggle = () => {\n    setRevocationModalOpen(!revocationModalOpen);\n  };\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const data = await fetchAdminUI<UserSessionRepresentation[]>(\n      adminClient,\n      \"ui-ext/sessions\",\n      {\n        first: `${first}`,\n        max: `${max}`,\n        type: filterType,\n        search: search || \"\",\n      },\n    );\n    setNoSessions(data.length === 0);\n    return data;\n  };\n\n  const [toggleLogoutDialog, LogoutConfirm] = useConfirmDialog({\n    titleKey: \"logoutAllSessions\",\n    messageKey: \"logoutAllDescription\",\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.realms.logoutAll({ realm });\n        refresh();\n      } catch (error) {\n        addError(\"logoutAllSessionsError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <LogoutConfirm />\n      <ViewHeader\n        dropdownItems={[\n          <DropdownItem\n            key=\"toggle-modal\"\n            data-testid=\"revocation\"\n            component=\"button\"\n            onClick={() => handleRevocationModalToggle()}\n          >\n            {t(\"revocation\")}\n          </DropdownItem>,\n          <DropdownItem\n            key=\"delete-role\"\n            data-testid=\"logout-all\"\n            component=\"button\"\n            isDisabled={noSessions}\n            onClick={toggleLogoutDialog}\n          >\n            {t(\"signOutAllActiveSessions\")}\n          </DropdownItem>,\n        ]}\n        titleKey=\"titleSessions\"\n        subKey=\"sessionExplain\"\n        helpUrl={helpUrls.sessionsUrl}\n      />\n      <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n        {revocationModalOpen && (\n          <RevocationModal\n            handleModalToggle={handleRevocationModalToggle}\n            save={() => {\n              handleRevocationModalToggle();\n            }}\n          />\n        )}\n        <SessionsTable\n          key={key}\n          loader={loader}\n          isSearching={filterType !== \"ALL\"}\n          isPaginated\n          filter={\n            <SessionFilter\n              filterType={filterType}\n              onChange={(type) => {\n                setFilterType(type);\n                refresh();\n              }}\n            />\n          }\n        />\n      </PageSection>\n    </>\n  );\n}\n"],"names":["RevocationModal","handleModalToggle","save","adminClient","useAdminClient","t","useTranslation","addAlert","useAlerts","realmName","realm","refresh","useRealm","register","handleSubmit","useForm","parseResult","result","prefixKey","successCount","failedCount","AlertVariant","setToNow","error","clearNotBefore","push","jsxs","Modal","ModalVariant","jsx","Button","ButtonVariant","TextContent","Form","FormGroup","TextInput","SessionFilter","filterType","onChange","open","toggle","useToggle","KeycloakSelect","FilterIcon","value","SelectOption","SessionsSection","key","setKey","useState","addError","revocationModalOpen","setRevocationModalOpen","setFilterType","noSessions","setNoSessions","handleRevocationModalToggle","loader","first","max","search","data","fetchAdminUI","toggleLogoutDialog","LogoutConfirm","useConfirmDialog","Fragment","ViewHeader","DropdownItem","helpUrls","PageSection","SessionsTable","type"],"mappings":"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"}