{"version":3,"file":"ScopeForm-Bgdtwy4X.js","sources":["../../src/client-scopes/details/ScopeForm.tsx"],"sourcesContent":["import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport { ActionGroup, Button } from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport {\n  FormSubmitButton,\n  SelectControl,\n  TextAreaControl,\n  TextControl,\n} from \"@keycloak/keycloak-ui-shared\";\n\nimport { getProtocolName } from \"../../clients/utils\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport {\n  ClientScopeDefaultOptionalType,\n  allClientScopeTypes,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useLoginProviders } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm, convertToFormValues } from \"../../util\";\nimport useIsFeatureEnabled, { Feature } from \"../../utils/useIsFeatureEnabled\";\nimport { toClientScopes } from \"../routes/ClientScopes\";\n\ntype ScopeFormProps = {\n  clientScope?: ClientScopeRepresentation;\n  save: (clientScope: ClientScopeDefaultOptionalType) => void;\n};\n\nexport const ScopeForm = ({ clientScope, save }: ScopeFormProps) => {\n  const { t } = useTranslation();\n  const form = useForm<ClientScopeDefaultOptionalType>({ mode: \"onChange\" });\n  const { control, handleSubmit, setValue, formState } = form;\n  const { realm } = useRealm();\n\n  const providers = useLoginProviders();\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const isDynamicScopesEnabled = isFeatureEnabled(Feature.DynamicScopes);\n\n  const displayOnConsentScreen: string = useWatch({\n    control,\n    name: convertAttributeNameToForm(\"attributes.display.on.consent.screen\"),\n    defaultValue:\n      clientScope?.attributes?.[\"display.on.consent.screen\"] ?? \"true\",\n  });\n\n  const dynamicScope = useWatch({\n    control,\n    name: convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n      \"attributes.is.dynamic.scope\",\n    ),\n    defaultValue: \"false\",\n  });\n\n  const setDynamicRegex = (value: string, append: boolean) =>\n    setValue(\n      convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n        \"attributes.dynamic.scope.regexp\",\n      ),\n      append ? `${value}:*` : value,\n    );\n\n  useEffect(() => {\n    convertToFormValues(clientScope ?? {}, setValue);\n  }, [clientScope]);\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      onSubmit={handleSubmit(save)}\n      isHorizontal\n    >\n      <FormProvider {...form}>\n        <TextControl\n          name=\"name\"\n          label={t(\"name\")}\n          labelIcon={t(\"scopeNameHelp\")}\n          rules={{\n            required: {\n              value: true,\n              message: t(\"required\"),\n            },\n            onChange: (e) => {\n              if (isDynamicScopesEnabled)\n                setDynamicRegex(e.target.validated, true);\n            },\n          }}\n        />\n        {isDynamicScopesEnabled && (\n          <>\n            <DefaultSwitchControl\n              name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n                \"attributes.is.dynamic.scope\",\n              )}\n              label={t(\"dynamicScope\")}\n              labelIcon={t(\"dynamicScopeHelp\")}\n              onChange={(event, value) => {\n                setDynamicRegex(\n                  value ? form.getValues(\"name\") || \"\" : \"\",\n                  value,\n                );\n              }}\n              stringify\n            />\n            {dynamicScope === \"true\" && (\n              <TextControl\n                name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n                  \"attributes.dynamic.scope.regexp\",\n                )}\n                label={t(\"dynamicScopeFormat\")}\n                labelIcon={t(\"dynamicScopeFormatHelp\")}\n                isDisabled\n              />\n            )}\n          </>\n        )}\n        <TextControl\n          name=\"description\"\n          label={t(\"description\")}\n          labelIcon={t(\"scopeDescriptionHelp\")}\n          rules={{\n            maxLength: {\n              value: 255,\n              message: t(\"maxLength\"),\n            },\n          }}\n        />\n        <SelectControl\n          id=\"kc-type\"\n          name=\"type\"\n          label={t(\"type\")}\n          labelIcon={t(\"scopeTypeHelp\")}\n          controller={{ defaultValue: allClientScopeTypes[0] }}\n          options={allClientScopeTypes.map((key) => ({\n            key,\n            value: t(`clientScopeType.${key}`),\n          }))}\n        />\n        {!clientScope && (\n          <SelectControl\n            id=\"kc-protocol\"\n            name=\"protocol\"\n            label={t(\"protocol\")}\n            labelIcon={t(\"protocolHelp\")}\n            controller={{ defaultValue: providers[0] }}\n            options={providers.map((option) => ({\n              key: option,\n              value: getProtocolName(t, option),\n            }))}\n          />\n        )}\n        <DefaultSwitchControl\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.display.on.consent.screen\",\n          )}\n          defaultValue={displayOnConsentScreen}\n          label={t(\"displayOnConsentScreen\")}\n          labelIcon={t(\"displayOnConsentScreenHelp\")}\n          stringify\n        />\n        {displayOnConsentScreen === \"true\" && (\n          <TextAreaControl\n            name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n              \"attributes.consent.screen.text\",\n            )}\n            label={t(\"consentScreenText\")}\n            labelIcon={t(\"consentScreenTextHelp\")}\n          />\n        )}\n        <DefaultSwitchControl\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.include.in.token.scope\",\n          )}\n          label={t(\"includeInTokenScope\")}\n          labelIcon={t(\"includeInTokenScopeHelp\")}\n          stringify\n        />\n        <TextControl\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.gui.order\",\n          )}\n          label={t(\"guiOrder\")}\n          labelIcon={t(\"guiOrderHelp\")}\n          type=\"number\"\n          min={0}\n        />\n        <ActionGroup>\n          <FormSubmitButton formState={formState}>{t(\"save\")}</FormSubmitButton>\n          <Button\n            variant=\"link\"\n            component={(props) => (\n              <Link {...props} to={toClientScopes({ realm })}></Link>\n            )}\n          >\n            {t(\"cancel\")}\n          </Button>\n        </ActionGroup>\n      </FormProvider>\n    </FormAccess>\n  );\n};\n"],"names":["ScopeForm","clientScope","save","t","useTranslation","form","useForm","control","handleSubmit","setValue","formState","realm","useRealm","providers","useLoginProviders","isDynamicScopesEnabled","useIsFeatureEnabled","Feature","displayOnConsentScreen","useWatch","convertAttributeNameToForm","dynamicScope","setDynamicRegex","value","append","useEffect","convertToFormValues","jsx","FormAccess","jsxs","FormProvider","TextControl","e","Fragment","DefaultSwitchControl","event","SelectControl","allClientScopeTypes","key","option","getProtocolName","TextAreaControl","ActionGroup","FormSubmitButton","Button","props","Link","toClientScopes"],"mappings":"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"}