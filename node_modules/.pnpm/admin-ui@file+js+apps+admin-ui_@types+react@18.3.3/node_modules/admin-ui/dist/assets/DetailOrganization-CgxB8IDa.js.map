{"version":3,"file":"DetailOrganization-CgxB8IDa.js","sources":["../../src/organizations/DetailOraganzationHeader.tsx","../../src/organizations/InviteMemberModal.tsx","../../src/organizations/Members.tsx","../../src/organizations/IdentityProviderSelect.tsx","../../src/organizations/LinkIdentityProviderModal.tsx","../../src/organizations/IdentityProviders.tsx","../../src/organizations/DetailOrganization.tsx"],"sourcesContent":["import { ButtonVariant, DropdownItem } from \"@patternfly/react-core\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useTranslation } from \"react-i18next\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { toOrganizations } from \"./routes/Organizations\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\ntype DetailOrganizationHeaderProps = {\n  save: () => void;\n};\n\nexport const DetailOrganizationHeader = ({\n  save,\n}: DetailOrganizationHeaderProps) => {\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const id = useWatch({ name: \"id\" });\n  const name = useWatch({ name: \"name\" });\n\n  const { setValue } = useFormContext();\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disableConfirmOrganizationTitle\",\n    messageKey: \"disableConfirmOrganization\",\n    continueButtonLabel: \"disable\",\n    onConfirm: () => {\n      setValue(\"enabled\", false);\n      save();\n    },\n  });\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"organizationDelete\",\n    messageKey: \"organizationDeleteConfirm\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.organizations.delById({ id });\n        addAlert(t(\"organizationDeletedSuccess\"));\n        navigate(toOrganizations({ realm }));\n      } catch (error) {\n        addError(\"organizationDeleteError\", error);\n      }\n    },\n  });\n\n  return (\n    <Controller\n      name=\"enabled\"\n      render={({ field: { value, onChange } }) => (\n        <>\n          <DeleteConfirm />\n          <DisableConfirm />\n          <ViewHeader\n            titleKey={name || \"\"}\n            divider={false}\n            dropdownItems={[\n              <DropdownItem\n                data-testid=\"delete-client\"\n                key=\"delete\"\n                onClick={toggleDeleteDialog}\n              >\n                {t(\"delete\")}\n              </DropdownItem>,\n            ]}\n            isEnabled={value}\n            onToggle={(value) => {\n              if (!value) {\n                toggleDisableDialog();\n              } else {\n                onChange(value);\n                save();\n              }\n            }}\n          />\n        </>\n      )}\n    />\n  );\n};\n","import { FormSubmitButton, TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\n\ntype InviteMemberModalProps = {\n  orgId: string;\n  onClose: () => void;\n};\n\nexport const InviteMemberModal = ({\n  orgId,\n  onClose,\n}: InviteMemberModalProps) => {\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const { t } = useTranslation();\n  const form = useForm<Record<string, string>>();\n  const { handleSubmit, formState } = form;\n\n  const submitForm = async (data: Record<string, string>) => {\n    try {\n      const formData = new FormData();\n      for (const key in data) {\n        formData.append(key, data[key]);\n      }\n      await adminClient.organizations.invite({ orgId }, formData);\n      addAlert(t(\"inviteSent\"));\n      onClose();\n    } catch (error) {\n      addError(\"inviteSentError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"inviteMember\")}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <FormSubmitButton\n          formState={formState}\n          data-testid=\"save\"\n          key=\"confirm\"\n          form=\"form\"\n          allowInvalid\n          allowNonDirty\n        >\n          {t(\"send\")}\n        </FormSubmitButton>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form id=\"form\" onSubmit={handleSubmit(submitForm)}>\n          <TextControl\n            name=\"email\"\n            label={t(\"email\")}\n            rules={{ required: t(\"required\") }}\n            autoFocus\n          />\n          <TextControl name=\"firstName\" label={t(\"firstName\")} />\n          <TextControl name=\"lastName\" label={t(\"lastName\")} />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { MemberModal } from \"../groups/MembersModal\";\nimport { toUser } from \"../user/routes/User\";\nimport { useParams } from \"../utils/useParams\";\nimport useToggle from \"../utils/useToggle\";\nimport { InviteMemberModal } from \"./InviteMemberModal\";\nimport { EditOrganizationParams } from \"./routes/EditOrganization\";\n\nconst UserDetailLink = (user: any) => {\n  const { realm } = useRealm();\n  return (\n    <Link to={toUser({ realm, id: user.id!, tab: \"settings\" })}>\n      {user.username}\n    </Link>\n  );\n};\n\nexport const Members = () => {\n  const { t } = useTranslation();\n  const { adminClient } = useAdminClient();\n  const { id: orgId } = useParams<EditOrganizationParams>();\n  const { addAlert, addError } = useAlerts();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [open, toggle] = useToggle();\n  const [openAddMembers, toggleAddMembers] = useToggle();\n  const [openInviteMembers, toggleInviteMembers] = useToggle();\n  const [selectedMembers, setSelectedMembers] = useState<UserRepresentation[]>(\n    [],\n  );\n\n  const loader = (first?: number, max?: number, search?: string) =>\n    adminClient.organizations.listMembers({ orgId, first, max, search });\n\n  const removeMember = async (selectedMembers: UserRepresentation[]) => {\n    try {\n      await Promise.all(\n        selectedMembers.map((user) =>\n          adminClient.organizations.delMember({\n            orgId,\n            userId: user.id!,\n          }),\n        ),\n      );\n      addAlert(t(\"organizationUsersLeft\", { count: selectedMembers.length }));\n    } catch (error) {\n      addError(\"organizationUsersLeftError\", error);\n    }\n\n    refresh();\n  };\n  return (\n    <PageSection variant=\"light\">\n      {openAddMembers && (\n        <MemberModal\n          membersQuery={async () =>\n            await adminClient.organizations.listMembers({ orgId })\n          }\n          onAdd={async (selectedRows) => {\n            try {\n              await Promise.all(\n                selectedRows.map((user) =>\n                  adminClient.organizations.addMember({\n                    orgId,\n                    userId: user.id!,\n                  }),\n                ),\n              );\n              addAlert(\n                t(\"organizationUsersAdded\", { count: selectedRows.length }),\n              );\n            } catch (error) {\n              addError(\"organizationUsersAddedError\", error);\n            }\n          }}\n          onClose={() => {\n            toggleAddMembers();\n            refresh();\n          }}\n        />\n      )}\n      {openInviteMembers && (\n        <InviteMemberModal orgId={orgId} onClose={toggleInviteMembers} />\n      )}\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"membersList\"\n        searchPlaceholderKey=\"searchMember\"\n        onSelect={(members) => setSelectedMembers([...members])}\n        canSelectAll\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <Dropdown\n                onOpenChange={toggle}\n                toggle={(ref) => (\n                  <MenuToggle\n                    ref={ref}\n                    onClick={toggle}\n                    isExpanded={open}\n                    variant=\"primary\"\n                  >\n                    {t(\"addMember\")}\n                  </MenuToggle>\n                )}\n                isOpen={open}\n              >\n                <DropdownList>\n                  <DropdownItem\n                    onClick={() => {\n                      toggleAddMembers();\n                      toggle();\n                    }}\n                  >\n                    {t(\"addRealmUser\")}\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      toggleInviteMembers();\n                      toggle();\n                    }}\n                  >\n                    {t(\"inviteMember\")}\n                  </DropdownItem>\n                </DropdownList>\n              </Dropdown>\n            </ToolbarItem>\n            <ToolbarItem>\n              <Button\n                variant=\"plain\"\n                isDisabled={selectedMembers.length === 0}\n                onClick={() => removeMember(selectedMembers)}\n              >\n                {t(\"removeMember\")}\n              </Button>\n            </ToolbarItem>\n          </>\n        }\n        actions={[\n          {\n            title: t(\"remove\"),\n            onRowClick: async (member) => {\n              await removeMember([member]);\n            },\n          },\n        ]}\n        columns={[\n          {\n            name: \"username\",\n            cellRenderer: UserDetailLink,\n          },\n          {\n            name: \"email\",\n          },\n          {\n            name: \"firstName\",\n          },\n          {\n            name: \"lastName\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyMembers\")}\n            instructions={t(\"emptyMembersInstructions\")}\n            secondaryActions={[\n              {\n                text: t(\"addRealmUser\"),\n                onClick: toggleAddMembers,\n              },\n              {\n                text: t(\"inviteMember\"),\n                onClick: toggleInviteMembers,\n              },\n            ]}\n          />\n        }\n      />\n    </PageSection>\n  );\n};\n","import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport { IdentityProvidersQuery } from \"@keycloak/keycloak-admin-client/lib/resources/identityProviders\";\nimport { FormErrorText, HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  MenuToggle,\n  Select,\n  SelectList,\n  SelectOption,\n  TextInputGroup,\n  TextInputGroupMain,\n  TextInputGroupUtilities,\n} from \"@patternfly/react-core\";\nimport { TimesIcon } from \"@patternfly/react-icons\";\nimport { debounce } from \"lodash-es\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { ComponentProps } from \"../components/dynamic/components\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useToggle from \"../utils/useToggle\";\n\ntype IdentityProviderSelectProps = ComponentProps & {\n  variant?: \"typeaheadMulti\" | \"typeahead\";\n  isRequired?: boolean;\n};\n\nexport const IdentityProviderSelect = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isRequired,\n  variant = \"typeahead\",\n  isDisabled,\n}: IdentityProviderSelectProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const {\n    control,\n    getValues,\n    formState: { errors },\n  } = useFormContext();\n  const values: string[] | undefined = getValues(name!);\n\n  const [open, toggleOpen, setOpen] = useToggle();\n  const [inputValue, setInputValue] = useState(\"\");\n  const textInputRef = useRef<HTMLInputElement>();\n  const [idps, setIdps] = useState<\n    (IdentityProviderRepresentation | undefined)[]\n  >([]);\n  const [search, setSearch] = useState(\"\");\n\n  const debounceFn = useCallback(debounce(setSearch, 1000), []);\n\n  useFetch(\n    async () => {\n      const params: IdentityProvidersQuery = {\n        max: 20,\n      };\n      if (search) {\n        params.search = search;\n      }\n\n      const idps = await adminClient.identityProviders.find(params);\n      return idps.filter((i) => !i.config?.[\"kc.org\"]);\n    },\n    setIdps,\n    [search],\n  );\n\n  const convert = (\n    identityProviders: (IdentityProviderRepresentation | undefined)[],\n  ) => {\n    const options = identityProviders.map((option) => (\n      <SelectOption\n        key={option!.alias}\n        value={option!.alias}\n        selected={values?.includes(option!.alias!)}\n      >\n        {option!.alias}\n      </SelectOption>\n    ));\n    if (options.length === 0) {\n      return <SelectOption value=\"\">{t(\"noResultsFound\")}</SelectOption>;\n    }\n    return options;\n  };\n\n  if (!idps) {\n    return <KeycloakSpinner />;\n  }\n  return (\n    <FormGroup\n      label={t(label!)}\n      isRequired={isRequired}\n      labelIcon={\n        helpText ? (\n          <HelpItem helpText={helpText!} fieldLabelId={label!} />\n        ) : undefined\n      }\n      fieldId={name!}\n    >\n      <Controller\n        name={name!}\n        defaultValue={defaultValue}\n        control={control}\n        rules={{\n          validate: (value: string[]) =>\n            isRequired && value.filter((i) => i !== undefined).length === 0\n              ? t(\"required\")\n              : undefined,\n        }}\n        render={({ field }) => (\n          <Select\n            id={name!}\n            onOpenChange={toggleOpen}\n            toggle={(ref) => (\n              <MenuToggle\n                data-testid={name!}\n                ref={ref}\n                variant=\"typeahead\"\n                onClick={toggleOpen}\n                isExpanded={open}\n                isFullWidth\n                isDisabled={isDisabled}\n                status={errors[name!] ? \"danger\" : undefined}\n              >\n                <TextInputGroup isPlain>\n                  <TextInputGroupMain\n                    value={inputValue || field.value}\n                    onClick={toggleOpen}\n                    onChange={(_, value) => {\n                      setOpen(true);\n                      setInputValue(value);\n                      debounceFn(value);\n                    }}\n                    autoComplete=\"off\"\n                    innerRef={textInputRef}\n                    placeholderText={t(\"selectAUser\")}\n                    {...(field.value && {\n                      \"aria-activedescendant\": field.value,\n                    })}\n                    role=\"combobox\"\n                    isExpanded={open}\n                    aria-controls=\"select-create-typeahead-listbox\"\n                  >\n                    {variant === \"typeaheadMulti\" &&\n                      Array.isArray(field.value) && (\n                        <ChipGroup aria-label=\"Current selections\">\n                          {field.value.map(\n                            (selection: string, index: number) => (\n                              <Chip\n                                key={index}\n                                onClick={(ev) => {\n                                  ev.stopPropagation();\n                                  field.onChange(\n                                    field.value.filter(\n                                      (item: string) => item !== selection,\n                                    ),\n                                  );\n                                }}\n                              >\n                                {selection}\n                              </Chip>\n                            ),\n                          )}\n                        </ChipGroup>\n                      )}\n                  </TextInputGroupMain>\n                  <TextInputGroupUtilities>\n                    {!!search && (\n                      <Button\n                        variant=\"plain\"\n                        onClick={() => {\n                          setInputValue(\"\");\n                          setSearch(\"\");\n                          field.onChange([]);\n                          textInputRef?.current?.focus();\n                        }}\n                        aria-label={t(\"clear\")}\n                      >\n                        <TimesIcon aria-hidden />\n                      </Button>\n                    )}\n                  </TextInputGroupUtilities>\n                </TextInputGroup>\n              </MenuToggle>\n            )}\n            isOpen={open}\n            selected={field.value}\n            onSelect={(_, v) => {\n              const option = v?.toString();\n              if (variant !== \"typeaheadMulti\") {\n                const removed = field.value.includes(option);\n                removed ? field.onChange([]) : field.onChange([option]);\n                setInputValue(removed ? \"\" : option || \"\");\n                setOpen(false);\n              } else {\n                const changedValue = field.value.find(\n                  (v: string) => v === option,\n                )\n                  ? field.value.filter((v: string) => v !== option)\n                  : [...field.value, option];\n                field.onChange(changedValue);\n              }\n            }}\n            aria-label={t(name!)}\n          >\n            <SelectList>{convert(idps)}</SelectList>\n          </Select>\n        )}\n      />\n      {errors[name!] && <FormErrorText message={t(\"required\")} />}\n    </FormGroup>\n  );\n};\n","import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport { FormSubmitButton, SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { DefaultSwitchControl } from \"../components/SwitchControl\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  convertAttributeNameToForm,\n  convertFormValuesToObject,\n  convertToFormValues,\n} from \"../util\";\nimport { IdentityProviderSelect } from \"./IdentityProviderSelect\";\nimport { OrganizationFormType } from \"./OrganizationForm\";\n\ntype LinkIdentityProviderModalProps = {\n  orgId: string;\n  identityProvider?: IdentityProviderRepresentation;\n  onClose: () => void;\n};\n\ntype LinkRepresentation = {\n  alias: string[] | string;\n  config: {\n    \"kc.org.domain\": string;\n    \"kc.org.broker.public\": string;\n  };\n};\n\nexport const LinkIdentityProviderModal = ({\n  orgId,\n  identityProvider,\n  onClose,\n}: LinkIdentityProviderModalProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const form = useForm<LinkRepresentation>({ mode: \"onChange\" });\n  const { handleSubmit, formState, setValue } = form;\n  const { getValues } = useFormContext<OrganizationFormType>();\n\n  useEffect(\n    () =>\n      convertToFormValues(\n        { ...identityProvider, alias: [identityProvider?.alias] },\n        setValue,\n      ),\n    [],\n  );\n\n  const submitForm = async (data: LinkRepresentation) => {\n    try {\n      const foundIdentityProvider = await adminClient.identityProviders.findOne(\n        {\n          alias: data.alias[0],\n        },\n      );\n      if (!foundIdentityProvider) {\n        throw new Error(t(\"notFound\"));\n      }\n      const { config } = convertFormValuesToObject(data);\n      foundIdentityProvider.config = {\n        ...foundIdentityProvider.config,\n        ...config,\n      };\n      await adminClient.identityProviders.update(\n        { alias: data.alias[0] },\n        foundIdentityProvider,\n      );\n\n      if (!identityProvider) {\n        await adminClient.organizations.linkIdp({\n          orgId,\n          alias: data.alias[0],\n        });\n      }\n      addAlert(\n        t(!identityProvider ? \"linkSuccessful\" : \"linkUpdatedSuccessful\"),\n      );\n      onClose();\n    } catch (error) {\n      addError(!identityProvider ? \"linkError\" : \"linkUpdatedError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"linkIdentityProvider\")}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <FormSubmitButton\n          formState={formState}\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          form=\"form\"\n          allowInvalid\n          allowNonDirty\n        >\n          {t(\"save\")}\n        </FormSubmitButton>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form id=\"form\" onSubmit={handleSubmit(submitForm)}>\n          <IdentityProviderSelect\n            name=\"alias\"\n            label={t(\"identityProvider\")}\n            defaultValue={[]}\n            isRequired\n            isDisabled={!!identityProvider}\n          />\n          <SelectControl\n            name={convertAttributeNameToForm(\"config.kc.org.domain\")}\n            label={t(\"domain\")}\n            controller={{ defaultValue: \"\" }}\n            options={[\n              { key: \"\", value: t(\"none\") },\n              ...getValues(\"domains\")!.map((d) => ({ key: d, value: d })),\n            ]}\n            menuAppendTo=\"parent\"\n          />\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm(\"config.kc.org.broker.public\")}\n            label={t(\"shownOnLoginPage\")}\n            labelIcon={t(\"shownOnLoginPageHelp\")}\n            stringify\n          />\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm(\n              \"config.kc.org.broker.redirect.mode.email-matches\",\n            )}\n            label={t(\"redirectWhenEmailMatches\")}\n            labelIcon={t(\"redirectWhenEmailMatchesHelp\")}\n            stringify\n          />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  Button,\n  ButtonVariant,\n  PageSection,\n  Switch,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { BellIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useToggle from \"../utils/useToggle\";\nimport { LinkIdentityProviderModal } from \"./LinkIdentityProviderModal\";\nimport { EditOrganizationParams } from \"./routes/EditOrganization\";\n\ntype ShownOnLoginPageCheckProps = {\n  row: IdentityProviderRepresentation;\n  refresh: () => void;\n};\n\nconst ShownOnLoginPageCheck = ({\n  row,\n  refresh,\n}: ShownOnLoginPageCheckProps) => {\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { t } = useTranslation();\n\n  const toggle = async (value: boolean) => {\n    try {\n      await adminClient.identityProviders.update(\n        { alias: row.alias! },\n        {\n          ...row,\n          config: {\n            ...row.config,\n            \"kc.org.broker.public\": `${value}`,\n          },\n        },\n      );\n      addAlert(t(\"linkUpdatedSuccessful\"));\n\n      refresh();\n    } catch (error) {\n      addError(\"linkUpdatedError\", error);\n    }\n  };\n\n  return (\n    <Switch\n      label={t(\"on\")}\n      labelOff={t(\"off\")}\n      isChecked={row.config?.[\"kc.org.broker.public\"] === \"true\"}\n      onChange={(_, value) => toggle(value)}\n    />\n  );\n};\n\nexport const IdentityProviders = () => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { id: orgId } = useParams<EditOrganizationParams>();\n  const { addAlert, addError } = useAlerts();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [hasProviders, setHasProviders] = useState(false);\n  const [selectedRow, setSelectedRow] =\n    useState<IdentityProviderRepresentation>();\n  const [open, toggleOpen] = useToggle();\n\n  useFetch(\n    async () => adminClient.identityProviders.find({ max: 1 }),\n    (providers) => {\n      setHasProviders(providers.length === 1);\n    },\n    [],\n  );\n\n  const loader = async () => {\n    const providers = await adminClient.organizations.listIdentityProviders({\n      orgId: orgId!,\n    });\n    return sortBy(providers, \"alias\");\n  };\n\n  const [toggleUnlinkDialog, UnlinkConfirm] = useConfirmDialog({\n    titleKey: \"identityProviderUnlink\",\n    messageKey: \"identityProviderUnlinkConfirm\",\n    continueButtonLabel: \"unLinkIdentityProvider\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.organizations.unLinkIdp({\n          orgId: orgId!,\n          alias: selectedRow!.alias! as string,\n        });\n        setSelectedRow(undefined);\n        addAlert(t(\"unLinkSuccessful\"));\n        refresh();\n      } catch (error) {\n        addError(\"unLinkError\", error);\n      }\n    },\n  });\n\n  return (\n    <PageSection variant=\"light\">\n      <UnlinkConfirm />\n      {open && (\n        <LinkIdentityProviderModal\n          orgId={orgId!}\n          identityProvider={selectedRow}\n          onClose={() => {\n            toggleOpen();\n            refresh();\n          }}\n        />\n      )}\n      {!hasProviders ? (\n        <ListEmptyState\n          icon={BellIcon}\n          message={t(\"noIdentityProvider\")}\n          instructions={t(\"noIdentityProviderInstructions\")}\n        />\n      ) : (\n        <KeycloakDataTable\n          key={key}\n          loader={loader}\n          ariaLabelKey=\"identityProviders\"\n          searchPlaceholderKey=\"searchProvider\"\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                onClick={() => {\n                  setSelectedRow(undefined);\n                  toggleOpen();\n                }}\n              >\n                {t(\"linkIdentityProvider\")}\n              </Button>\n            </ToolbarItem>\n          }\n          actions={[\n            {\n              title: t(\"edit\"),\n              onRowClick: (row) => {\n                setSelectedRow(row);\n                toggleOpen();\n              },\n            },\n            {\n              title: t(\"unLinkIdentityProvider\"),\n              onRowClick: (row) => {\n                setSelectedRow(row);\n                toggleUnlinkDialog();\n              },\n            },\n          ]}\n          columns={[\n            {\n              name: \"alias\",\n            },\n            {\n              name: \"config['kc.org.domain']\",\n              displayKey: \"domain\",\n            },\n            {\n              name: \"providerId\",\n              displayKey: \"providerDetails\",\n            },\n            {\n              name: \"config['kc.org.broker.public']\",\n              displayKey: \"shownOnLoginPage\",\n              cellRenderer: (row) => (\n                <ShownOnLoginPageCheck row={row} refresh={refresh} />\n              ),\n            },\n          ]}\n          emptyState={\n            <ListEmptyState\n              message={t(\"emptyIdentityProviderLink\")}\n              instructions={t(\"emptyIdentityProviderLinkInstructions\")}\n              primaryActionText={t(\"linkIdentityProvider\")}\n              onPrimaryAction={toggleOpen}\n            />\n          }\n        />\n      )}\n    </PageSection>\n  );\n};\n","import { FormSubmitButton } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  PageSection,\n  Tab,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { AttributesForm } from \"../components/key-value-form/AttributeForm\";\nimport { arrayToKeyValue } from \"../components/key-value-form/key-value-convert\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { useParams } from \"../utils/useParams\";\nimport { DetailOrganizationHeader } from \"./DetailOraganzationHeader\";\nimport { Members } from \"./Members\";\nimport {\n  OrganizationForm,\n  OrganizationFormType,\n  convertToOrg,\n} from \"./OrganizationForm\";\nimport {\n  EditOrganizationParams,\n  OrganizationTab,\n  toEditOrganization,\n} from \"./routes/EditOrganization\";\nimport { IdentityProviders } from \"./IdentityProviders\";\n\nexport default function DetailOrganization() {\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const { realm } = useRealm();\n  const { id } = useParams<EditOrganizationParams>();\n  const { t } = useTranslation();\n\n  const form = useForm<OrganizationFormType>();\n\n  const save = async (org: OrganizationFormType) => {\n    try {\n      const organization = convertToOrg(org);\n      await adminClient.organizations.updateById({ id }, organization);\n      addAlert(t(\"organizationSaveSuccess\"));\n    } catch (error) {\n      addError(\"organizationSaveError\", error);\n    }\n  };\n\n  useFetch(\n    () => adminClient.organizations.findOne({ id }),\n    (org) => {\n      if (!org) {\n        throw new Error(t(\"notFound\"));\n      }\n      form.reset({\n        ...org,\n        domains: org.domains?.map((d) => d.name),\n        attributes: arrayToKeyValue(org.attributes),\n      });\n    },\n    [id],\n  );\n\n  const useTab = (tab: OrganizationTab) =>\n    useRoutableTab(\n      toEditOrganization({\n        realm,\n        id,\n        tab,\n      }),\n    );\n\n  const settingsTab = useTab(\"settings\");\n  const attributesTab = useTab(\"attributes\");\n  const membersTab = useTab(\"members\");\n  const identityProvidersTab = useTab(\"identityProviders\");\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <FormProvider {...form}>\n        <DetailOrganizationHeader save={() => save(form.getValues())} />\n        <RoutableTabs\n          data-testid=\"organization-tabs\"\n          aria-label={t(\"organization\")}\n          isBox\n          mountOnEnter\n        >\n          <Tab\n            id=\"settings\"\n            data-testid=\"settingsTab\"\n            title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n            {...settingsTab}\n          >\n            <PageSection>\n              <FormAccess\n                role=\"anyone\"\n                onSubmit={form.handleSubmit(save)}\n                isHorizontal\n              >\n                <OrganizationForm />\n                <ActionGroup>\n                  <FormSubmitButton\n                    formState={form.formState}\n                    data-testid=\"save\"\n                  >\n                    {t(\"save\")}\n                  </FormSubmitButton>\n                  <Button\n                    onClick={() => form.reset()}\n                    data-testid=\"reset\"\n                    variant=\"link\"\n                  >\n                    {t(\"reset\")}\n                  </Button>\n                </ActionGroup>\n              </FormAccess>\n            </PageSection>\n          </Tab>\n          <Tab\n            id=\"attributes\"\n            data-testid=\"attributeTab\"\n            title={<TabTitleText>{t(\"attributes\")}</TabTitleText>}\n            {...attributesTab}\n          >\n            <PageSection variant=\"light\">\n              <AttributesForm\n                form={form}\n                save={save}\n                reset={() =>\n                  form.reset({\n                    ...form.getValues(),\n                  })\n                }\n                name=\"attributes\"\n              />\n            </PageSection>\n          </Tab>\n          <Tab\n            id=\"members\"\n            data-testid=\"membersTab\"\n            title={<TabTitleText>{t(\"members\")}</TabTitleText>}\n            {...membersTab}\n          >\n            <Members />\n          </Tab>\n          <Tab\n            id=\"identityProviders\"\n            data-testid=\"identityProvidersTab\"\n            title={<TabTitleText>{t(\"identityProviders\")}</TabTitleText>}\n            {...identityProvidersTab}\n          >\n            <IdentityProviders />\n          </Tab>\n        </RoutableTabs>\n      </FormProvider>\n    </PageSection>\n  );\n}\n"],"names":["DetailOrganizationHeader","save","adminClient","useAdminClient","realm","useRealm","navigate","useNavigate","t","useTranslation","addAlert","addError","useAlerts","id","useWatch","name","setValue","useFormContext","toggleDisableDialog","DisableConfirm","useConfirmDialog","toggleDeleteDialog","DeleteConfirm","ButtonVariant","toOrganizations","error","jsx","Controller","value","onChange","jsxs","Fragment","ViewHeader","DropdownItem","InviteMemberModal","orgId","onClose","form","useForm","handleSubmit","formState","submitForm","data","formData","key","Modal","ModalVariant","FormSubmitButton","Button","FormProvider","Form","TextControl","UserDetailLink","user","Link","toUser","Members","useParams","setKey","useState","refresh","open","toggle","useToggle","openAddMembers","toggleAddMembers","openInviteMembers","toggleInviteMembers","selectedMembers","setSelectedMembers","loader","first","max","search","removeMember","PageSection","MemberModal","selectedRows","KeycloakDataTable","members","ToolbarItem","Dropdown","ref","MenuToggle","DropdownList","member","ListEmptyState","IdentityProviderSelect","label","helpText","defaultValue","isRequired","variant","isDisabled","control","getValues","errors","values","toggleOpen","setOpen","inputValue","setInputValue","textInputRef","useRef","idps","setIdps","setSearch","debounceFn","useCallback","debounce","useFetch","params","i","convert","identityProviders","options","option","SelectOption","FormGroup","HelpItem","field","Select","TextInputGroup","TextInputGroupMain","_","ChipGroup","selection","index","Chip","ev","item","TextInputGroupUtilities","TimesIcon","v","removed","changedValue","SelectList","FormErrorText","KeycloakSpinner","LinkIdentityProviderModal","identityProvider","useEffect","convertToFormValues","foundIdentityProvider","config","convertFormValuesToObject","SelectControl","convertAttributeNameToForm","d","DefaultSwitchControl","ShownOnLoginPageCheck","row","Switch","IdentityProviders","hasProviders","setHasProviders","selectedRow","setSelectedRow","providers","sortBy","toggleUnlinkDialog","UnlinkConfirm","BellIcon","DetailOrganization","org","organization","convertToOrg","arrayToKeyValue","useTab","tab","useRoutableTab","toEditOrganization","settingsTab","attributesTab","membersTab","identityProvidersTab","RoutableTabs","Tab","TabTitleText","FormAccess","OrganizationForm","ActionGroup","AttributesForm"],"mappings":"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"}